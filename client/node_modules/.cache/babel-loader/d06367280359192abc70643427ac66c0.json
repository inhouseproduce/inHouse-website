{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\nvar assert = _util.assert;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar OTHER_DIMENSIONS = createHashMap(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);\n\nfunction summarizeDimensions(data) {\n  var summary = {};\n  var encode = summary.encode = {};\n  var notExtraCoordDimMap = createHashMap();\n  var defaultedLabel = [];\n  var defaultedTooltip = [];\n  each(data.dimensions, function (dimName) {\n    var dimItem = data.getDimensionInfo(dimName);\n    var coordDim = dimItem.coordDim;\n\n    if (coordDim) {\n      var coordDimArr = encode[coordDim];\n\n      if (!encode.hasOwnProperty(coordDim)) {\n        coordDimArr = encode[coordDim] = [];\n      }\n\n      coordDimArr[dimItem.coordDimIndex] = dimName;\n\n      if (!dimItem.isExtraCoord) {\n        notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,\n        // because when dataset is used, it is hard to guess which dimension\n        // can be value dimension. If both show x, y on label is not look good,\n        // and conventionally y axis is focused more.\n\n        if (mayLabelDimType(dimItem.type)) {\n          defaultedLabel[0] = dimName;\n        }\n      }\n\n      if (dimItem.defaultTooltip) {\n        defaultedTooltip.push(dimName);\n      }\n    }\n\n    OTHER_DIMENSIONS.each(function (v, otherDim) {\n      var otherDimArr = encode[otherDim];\n\n      if (!encode.hasOwnProperty(otherDim)) {\n        otherDimArr = encode[otherDim] = [];\n      }\n\n      var dimIndex = dimItem.otherDims[otherDim];\n\n      if (dimIndex != null && dimIndex !== false) {\n        otherDimArr[dimIndex] = dimItem.name;\n      }\n    });\n  });\n  var dataDimsOnCoord = [];\n  var encodeFirstDimNotExtra = {};\n  notExtraCoordDimMap.each(function (v, coordDim) {\n    var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.\n    // But should fix the case that radar axes: simplify the logic\n    // of `completeDimension`, remove `extraPrefix`.\n\n    encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data\n    // dim canot on more than one coordDim.\n\n    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);\n  });\n  summary.dataDimsOnCoord = dataDimsOnCoord;\n  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;\n  var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set\n  // in this way. Use label.formatter instead. May be remove this approach someday.\n\n  if (encodeLabel && encodeLabel.length) {\n    defaultedLabel = encodeLabel.slice();\n  }\n\n  var encodeTooltip = encode.tooltip;\n\n  if (encodeTooltip && encodeTooltip.length) {\n    defaultedTooltip = encodeTooltip.slice();\n  } else if (!defaultedTooltip.length) {\n    defaultedTooltip = defaultedLabel.slice();\n  }\n\n  encode.defaultedLabel = defaultedLabel;\n  encode.defaultedTooltip = defaultedTooltip;\n  return summary;\n}\n\nfunction getDimensionTypeByAxis(axisType) {\n  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';\n}\n\nfunction mayLabelDimType(dimType) {\n  // In most cases, ordinal and time do not suitable for label.\n  // Ordinal info can be displayed on axis. Time is too long.\n  return !(dimType === 'ordinal' || dimType === 'time');\n} // function findTheLastDimMayLabel(data) {\n//     // Get last value dim\n//     var dimensions = data.dimensions.slice();\n//     var valueType;\n//     var valueDim;\n//     while (dimensions.length && (\n//         valueDim = dimensions.pop(),\n//         valueType = data.getDimensionInfo(valueDim).type,\n//         valueType === 'ordinal' || valueType === 'time'\n//     )) {} // jshint ignore:line\n//     return valueDim;\n// }\n\n\nexports.OTHER_DIMENSIONS = OTHER_DIMENSIONS;\nexports.summarizeDimensions = summarizeDimensions;\nexports.getDimensionTypeByAxis = getDimensionTypeByAxis;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/data/helper/dimensionHelper.js"],"names":["_util","require","each","createHashMap","assert","_config","__DEV__","OTHER_DIMENSIONS","summarizeDimensions","data","summary","encode","notExtraCoordDimMap","defaultedLabel","defaultedTooltip","dimensions","dimName","dimItem","getDimensionInfo","coordDim","coordDimArr","hasOwnProperty","coordDimIndex","isExtraCoord","set","mayLabelDimType","type","defaultTooltip","push","v","otherDim","otherDimArr","dimIndex","otherDims","name","dataDimsOnCoord","encodeFirstDimNotExtra","dimArr","concat","encodeLabel","label","length","slice","encodeTooltip","tooltip","getDimensionTypeByAxis","axisType","dimType","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\nvar assert = _util.assert;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar OTHER_DIMENSIONS = createHashMap(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);\n\nfunction summarizeDimensions(data) {\n  var summary = {};\n  var encode = summary.encode = {};\n  var notExtraCoordDimMap = createHashMap();\n  var defaultedLabel = [];\n  var defaultedTooltip = [];\n  each(data.dimensions, function (dimName) {\n    var dimItem = data.getDimensionInfo(dimName);\n    var coordDim = dimItem.coordDim;\n\n    if (coordDim) {\n      var coordDimArr = encode[coordDim];\n\n      if (!encode.hasOwnProperty(coordDim)) {\n        coordDimArr = encode[coordDim] = [];\n      }\n\n      coordDimArr[dimItem.coordDimIndex] = dimName;\n\n      if (!dimItem.isExtraCoord) {\n        notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,\n        // because when dataset is used, it is hard to guess which dimension\n        // can be value dimension. If both show x, y on label is not look good,\n        // and conventionally y axis is focused more.\n\n        if (mayLabelDimType(dimItem.type)) {\n          defaultedLabel[0] = dimName;\n        }\n      }\n\n      if (dimItem.defaultTooltip) {\n        defaultedTooltip.push(dimName);\n      }\n    }\n\n    OTHER_DIMENSIONS.each(function (v, otherDim) {\n      var otherDimArr = encode[otherDim];\n\n      if (!encode.hasOwnProperty(otherDim)) {\n        otherDimArr = encode[otherDim] = [];\n      }\n\n      var dimIndex = dimItem.otherDims[otherDim];\n\n      if (dimIndex != null && dimIndex !== false) {\n        otherDimArr[dimIndex] = dimItem.name;\n      }\n    });\n  });\n  var dataDimsOnCoord = [];\n  var encodeFirstDimNotExtra = {};\n  notExtraCoordDimMap.each(function (v, coordDim) {\n    var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.\n    // But should fix the case that radar axes: simplify the logic\n    // of `completeDimension`, remove `extraPrefix`.\n\n    encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data\n    // dim canot on more than one coordDim.\n\n    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);\n  });\n  summary.dataDimsOnCoord = dataDimsOnCoord;\n  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;\n  var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set\n  // in this way. Use label.formatter instead. May be remove this approach someday.\n\n  if (encodeLabel && encodeLabel.length) {\n    defaultedLabel = encodeLabel.slice();\n  }\n\n  var encodeTooltip = encode.tooltip;\n\n  if (encodeTooltip && encodeTooltip.length) {\n    defaultedTooltip = encodeTooltip.slice();\n  } else if (!defaultedTooltip.length) {\n    defaultedTooltip = defaultedLabel.slice();\n  }\n\n  encode.defaultedLabel = defaultedLabel;\n  encode.defaultedTooltip = defaultedTooltip;\n  return summary;\n}\n\nfunction getDimensionTypeByAxis(axisType) {\n  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';\n}\n\nfunction mayLabelDimType(dimType) {\n  // In most cases, ordinal and time do not suitable for label.\n  // Ordinal info can be displayed on axis. Time is too long.\n  return !(dimType === 'ordinal' || dimType === 'time');\n} // function findTheLastDimMayLabel(data) {\n//     // Get last value dim\n//     var dimensions = data.dimensions.slice();\n//     var valueType;\n//     var valueDim;\n//     while (dimensions.length && (\n//         valueDim = dimensions.pop(),\n//         valueType = data.getDimensionInfo(valueDim).type,\n//         valueType === 'ordinal' || valueType === 'time'\n//     )) {} // jshint ignore:line\n//     return valueDim;\n// }\n\n\nexports.OTHER_DIMENSIONS = OTHER_DIMENSIONS;\nexports.summarizeDimensions = summarizeDimensions;\nexports.getDimensionTypeByAxis = getDimensionTypeByAxis;"]},"metadata":{},"sourceType":"script"}