{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction _default(seriesType, defaultSymbolType, legendSymbol) {\n  // Encoding visual for all series include which is filtered for legend drawing\n  return {\n    seriesType: seriesType,\n    // For legend.\n    performRawSeries: true,\n    reset: function reset(seriesModel, ecModel, api) {\n      var data = seriesModel.getData();\n      var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n      var symbolSize = seriesModel.get('symbolSize');\n      var keepAspect = seriesModel.get('symbolKeepAspect');\n      data.setVisual({\n        legendSymbol: legendSymbol || symbolType,\n        symbol: symbolType,\n        symbolSize: symbolSize,\n        symbolKeepAspect: keepAspect\n      }); // Only visible series has each data be visual encoded\n\n      if (ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var hasCallback = typeof symbolSize === 'function';\n\n      function dataEach(data, idx) {\n        if (typeof symbolSize === 'function') {\n          var rawValue = seriesModel.getRawValue(idx); // FIXME\n\n          var params = seriesModel.getDataParams(idx);\n          data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n        }\n\n        if (data.hasItemOption) {\n          var itemModel = data.getItemModel(idx);\n          var itemSymbolType = itemModel.getShallow('symbol', true);\n          var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n          var itemSymbolKeepAspect = itemModel.getShallow('symbolKeepAspect', true); // If has item symbol\n\n          if (itemSymbolType != null) {\n            data.setItemVisual(idx, 'symbol', itemSymbolType);\n          }\n\n          if (itemSymbolSize != null) {\n            // PENDING Transform symbolSize ?\n            data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n          }\n\n          if (itemSymbolKeepAspect != null) {\n            data.setItemVisual(idx, 'symbolKeepAspect', itemSymbolKeepAspect);\n          }\n        }\n      }\n\n      return {\n        dataEach: data.hasItemOption || hasCallback ? dataEach : null\n      };\n    }\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/visual/symbol.js"],"names":["_default","seriesType","defaultSymbolType","legendSymbol","performRawSeries","reset","seriesModel","ecModel","api","data","getData","symbolType","get","symbolSize","keepAspect","setVisual","symbol","symbolKeepAspect","isSeriesFiltered","hasCallback","dataEach","idx","rawValue","getRawValue","params","getDataParams","setItemVisual","hasItemOption","itemModel","getItemModel","itemSymbolType","getShallow","itemSymbolSize","itemSymbolKeepAspect","module","exports"],"mappings":"AACA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,iBAA9B,EAAiDC,YAAjD,EAA+D;AAC7D;AACA,SAAO;AACLF,IAAAA,UAAU,EAAEA,UADP;AAEL;AACAG,IAAAA,gBAAgB,EAAE,IAHb;AAILC,IAAAA,KAAK,EAAE,eAAUC,WAAV,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqC;AAC1C,UAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,EAAX;AACA,UAAIC,UAAU,GAAGL,WAAW,CAACM,GAAZ,CAAgB,QAAhB,KAA6BV,iBAA9C;AACA,UAAIW,UAAU,GAAGP,WAAW,CAACM,GAAZ,CAAgB,YAAhB,CAAjB;AACA,UAAIE,UAAU,GAAGR,WAAW,CAACM,GAAZ,CAAgB,kBAAhB,CAAjB;AACAH,MAAAA,IAAI,CAACM,SAAL,CAAe;AACbZ,QAAAA,YAAY,EAAEA,YAAY,IAAIQ,UADjB;AAEbK,QAAAA,MAAM,EAAEL,UAFK;AAGbE,QAAAA,UAAU,EAAEA,UAHC;AAIbI,QAAAA,gBAAgB,EAAEH;AAJL,OAAf,EAL0C,CAUtC;;AAEJ,UAAIP,OAAO,CAACW,gBAAR,CAAyBZ,WAAzB,CAAJ,EAA2C;AACzC;AACD;;AAED,UAAIa,WAAW,GAAG,OAAON,UAAP,KAAsB,UAAxC;;AAEA,eAASO,QAAT,CAAkBX,IAAlB,EAAwBY,GAAxB,EAA6B;AAC3B,YAAI,OAAOR,UAAP,KAAsB,UAA1B,EAAsC;AACpC,cAAIS,QAAQ,GAAGhB,WAAW,CAACiB,WAAZ,CAAwBF,GAAxB,CAAf,CADoC,CACS;;AAE7C,cAAIG,MAAM,GAAGlB,WAAW,CAACmB,aAAZ,CAA0BJ,GAA1B,CAAb;AACAZ,UAAAA,IAAI,CAACiB,aAAL,CAAmBL,GAAnB,EAAwB,YAAxB,EAAsCR,UAAU,CAACS,QAAD,EAAWE,MAAX,CAAhD;AACD;;AAED,YAAIf,IAAI,CAACkB,aAAT,EAAwB;AACtB,cAAIC,SAAS,GAAGnB,IAAI,CAACoB,YAAL,CAAkBR,GAAlB,CAAhB;AACA,cAAIS,cAAc,GAAGF,SAAS,CAACG,UAAV,CAAqB,QAArB,EAA+B,IAA/B,CAArB;AACA,cAAIC,cAAc,GAAGJ,SAAS,CAACG,UAAV,CAAqB,YAArB,EAAmC,IAAnC,CAArB;AACA,cAAIE,oBAAoB,GAAGL,SAAS,CAACG,UAAV,CAAqB,kBAArB,EAAyC,IAAzC,CAA3B,CAJsB,CAIqD;;AAE3E,cAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1BrB,YAAAA,IAAI,CAACiB,aAAL,CAAmBL,GAAnB,EAAwB,QAAxB,EAAkCS,cAAlC;AACD;;AAED,cAAIE,cAAc,IAAI,IAAtB,EAA4B;AAC1B;AACAvB,YAAAA,IAAI,CAACiB,aAAL,CAAmBL,GAAnB,EAAwB,YAAxB,EAAsCW,cAAtC;AACD;;AAED,cAAIC,oBAAoB,IAAI,IAA5B,EAAkC;AAChCxB,YAAAA,IAAI,CAACiB,aAAL,CAAmBL,GAAnB,EAAwB,kBAAxB,EAA4CY,oBAA5C;AACD;AACF;AACF;;AAED,aAAO;AACLb,QAAAA,QAAQ,EAAEX,IAAI,CAACkB,aAAL,IAAsBR,WAAtB,GAAoCC,QAApC,GAA+C;AADpD,OAAP;AAGD;AAtDI,GAAP;AAwDD;;AAEDc,MAAM,CAACC,OAAP,GAAiBnC,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction _default(seriesType, defaultSymbolType, legendSymbol) {\n  // Encoding visual for all series include which is filtered for legend drawing\n  return {\n    seriesType: seriesType,\n    // For legend.\n    performRawSeries: true,\n    reset: function (seriesModel, ecModel, api) {\n      var data = seriesModel.getData();\n      var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n      var symbolSize = seriesModel.get('symbolSize');\n      var keepAspect = seriesModel.get('symbolKeepAspect');\n      data.setVisual({\n        legendSymbol: legendSymbol || symbolType,\n        symbol: symbolType,\n        symbolSize: symbolSize,\n        symbolKeepAspect: keepAspect\n      }); // Only visible series has each data be visual encoded\n\n      if (ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var hasCallback = typeof symbolSize === 'function';\n\n      function dataEach(data, idx) {\n        if (typeof symbolSize === 'function') {\n          var rawValue = seriesModel.getRawValue(idx); // FIXME\n\n          var params = seriesModel.getDataParams(idx);\n          data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n        }\n\n        if (data.hasItemOption) {\n          var itemModel = data.getItemModel(idx);\n          var itemSymbolType = itemModel.getShallow('symbol', true);\n          var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n          var itemSymbolKeepAspect = itemModel.getShallow('symbolKeepAspect', true); // If has item symbol\n\n          if (itemSymbolType != null) {\n            data.setItemVisual(idx, 'symbol', itemSymbolType);\n          }\n\n          if (itemSymbolSize != null) {\n            // PENDING Transform symbolSize ?\n            data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n          }\n\n          if (itemSymbolKeepAspect != null) {\n            data.setItemVisual(idx, 'symbolKeepAspect', itemSymbolKeepAspect);\n          }\n        }\n      }\n\n      return {\n        dataEach: data.hasItemOption || hasCallback ? dataEach : null\n      };\n    }\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}