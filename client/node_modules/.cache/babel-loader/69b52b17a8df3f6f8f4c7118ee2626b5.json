{"ast":null,"code":"var Definable = require(\"./Definable\");\n\nvar zrUtil = require(\"../../core/util\");\n/**\n * @file Manages SVG shadow elements.\n * @author Zhang Wenli\n */\n\n/**\n * Manages SVG shadow elements.\n *\n * @class\n * @extends Definable\n * @param   {number}     zrId    zrender instance id\n * @param   {SVGElement} svgRoot root of SVG document\n */\n\n\nfunction ShadowManager(zrId, svgRoot) {\n  Definable.call(this, zrId, svgRoot, ['filter'], '__filter_in_use__', '_shadowDom');\n}\n\nzrUtil.inherits(ShadowManager, Definable);\n/**\n * Create new shadow DOM for fill or stroke if not exist,\n * but will not update shadow if exists.\n *\n * @param {SvgElement}  svgElement   SVG element to paint\n * @param {Displayable} displayable  zrender displayable element\n */\n\nShadowManager.prototype.addWithoutUpdate = function (svgElement, displayable) {\n  if (displayable && hasShadow(displayable.style)) {\n    var style = displayable.style; // Create dom in <defs> if not exists\n\n    var dom;\n\n    if (style._shadowDom) {\n      // Gradient exists\n      dom = style._shadowDom;\n      var defs = this.getDefs(true);\n\n      if (!defs.contains(style._shadowDom)) {\n        // _shadowDom is no longer in defs, recreate\n        this.addDom(dom);\n      }\n    } else {\n      // New dom\n      dom = this.add(displayable);\n    }\n\n    this.markUsed(displayable);\n    var id = dom.getAttribute('id');\n    svgElement.style.filter = 'url(#' + id + ')';\n  }\n};\n/**\n * Add a new shadow tag in <defs>\n *\n * @param {Displayable} displayable  zrender displayable element\n * @return {SVGFilterElement} created DOM\n */\n\n\nShadowManager.prototype.add = function (displayable) {\n  var dom = this.createElement('filter');\n  var style = displayable.style; // Set dom id with shadow id, since each shadow instance\n  // will have no more than one dom element.\n  // id may exists before for those dirty elements, in which case\n  // id should remain the same, and other attributes should be\n  // updated.\n\n  style._shadowDomId = style._shadowDomId || this.nextId++;\n  dom.setAttribute('id', 'zr' + this._zrId + '-shadow-' + style._shadowDomId);\n  this.updateDom(displayable, dom);\n  this.addDom(dom);\n  return dom;\n};\n/**\n * Update shadow.\n *\n * @param {Displayable} displayable  zrender displayable element\n */\n\n\nShadowManager.prototype.update = function (svgElement, displayable) {\n  var style = displayable.style;\n\n  if (hasShadow(style)) {\n    var that = this;\n    Definable.prototype.update.call(this, displayable, function (style) {\n      that.updateDom(displayable, style._shadowDom);\n    });\n  } else {\n    // Remove shadow\n    this.remove(svgElement, style);\n  }\n};\n/**\n * Remove DOM and clear parent filter\n */\n\n\nShadowManager.prototype.remove = function (svgElement, style) {\n  if (style._shadowDomId != null) {\n    this.removeDom(style);\n    svgElement.style.filter = '';\n  }\n};\n/**\n * Update shadow dom\n *\n * @param {Displayable} displayable  zrender displayable element\n * @param {SVGFilterElement} dom DOM to update\n */\n\n\nShadowManager.prototype.updateDom = function (displayable, dom) {\n  var domChild = dom.getElementsByTagName('feDropShadow');\n\n  if (domChild.length === 0) {\n    domChild = this.createElement('feDropShadow');\n  } else {\n    domChild = domChild[0];\n  }\n\n  var style = displayable.style;\n  var scaleX = displayable.scale ? displayable.scale[0] || 1 : 1;\n  var scaleY = displayable.scale ? displayable.scale[1] || 1 : 1; // TODO: textBoxShadowBlur is not supported yet\n\n  var offsetX, offsetY, blur, color;\n\n  if (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY) {\n    offsetX = style.shadowOffsetX || 0;\n    offsetY = style.shadowOffsetY || 0;\n    blur = style.shadowBlur;\n    color = style.shadowColor;\n  } else if (style.textShadowBlur) {\n    offsetX = style.textShadowOffsetX || 0;\n    offsetY = style.textShadowOffsetY || 0;\n    blur = style.textShadowBlur;\n    color = style.textShadowColor;\n  } else {\n    // Remove shadow\n    this.removeDom(dom, style);\n    return;\n  }\n\n  domChild.setAttribute('dx', offsetX / scaleX);\n  domChild.setAttribute('dy', offsetY / scaleY);\n  domChild.setAttribute('flood-color', color); // Divide by two here so that it looks the same as in canvas\n  // See: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-shadowblur\n\n  var stdDx = blur / 2 / scaleX;\n  var stdDy = blur / 2 / scaleY;\n  var stdDeviation = stdDx + ' ' + stdDy;\n  domChild.setAttribute('stdDeviation', stdDeviation); // Fix filter clipping problem\n\n  dom.setAttribute('x', '-100%');\n  dom.setAttribute('y', '-100%');\n  dom.setAttribute('width', Math.ceil(blur / 2 * 200) + '%');\n  dom.setAttribute('height', Math.ceil(blur / 2 * 200) + '%');\n  dom.appendChild(domChild); // Store dom element in shadow, to avoid creating multiple\n  // dom instances for the same shadow element\n\n  style._shadowDom = dom;\n};\n/**\n * Mark a single shadow to be used\n *\n * @param {Displayable} displayable displayable element\n */\n\n\nShadowManager.prototype.markUsed = function (displayable) {\n  var style = displayable.style;\n\n  if (style && style._shadowDom) {\n    Definable.prototype.markUsed.call(this, style._shadowDom);\n  }\n};\n\nfunction hasShadow(style) {\n  // TODO: textBoxShadowBlur is not supported yet\n  return style && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY || style.textShadowBlur || style.textShadowOffsetX || style.textShadowOffsetY);\n}\n\nvar _default = ShadowManager;\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/zrender/lib/svg/helper/ShadowManager.js"],"names":["Definable","require","zrUtil","ShadowManager","zrId","svgRoot","call","inherits","prototype","addWithoutUpdate","svgElement","displayable","hasShadow","style","dom","_shadowDom","defs","getDefs","contains","addDom","add","markUsed","id","getAttribute","filter","createElement","_shadowDomId","nextId","setAttribute","_zrId","updateDom","update","that","remove","removeDom","domChild","getElementsByTagName","length","scaleX","scale","scaleY","offsetX","offsetY","blur","color","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","textShadowBlur","textShadowOffsetX","textShadowOffsetY","textShadowColor","stdDx","stdDy","stdDeviation","Math","ceil","appendChild","_default","module","exports"],"mappings":"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","sourcesContent":["var Definable = require(\"./Definable\");\n\nvar zrUtil = require(\"../../core/util\");\n\n/**\n * @file Manages SVG shadow elements.\n * @author Zhang Wenli\n */\n\n/**\n * Manages SVG shadow elements.\n *\n * @class\n * @extends Definable\n * @param   {number}     zrId    zrender instance id\n * @param   {SVGElement} svgRoot root of SVG document\n */\nfunction ShadowManager(zrId, svgRoot) {\n  Definable.call(this, zrId, svgRoot, ['filter'], '__filter_in_use__', '_shadowDom');\n}\n\nzrUtil.inherits(ShadowManager, Definable);\n/**\n * Create new shadow DOM for fill or stroke if not exist,\n * but will not update shadow if exists.\n *\n * @param {SvgElement}  svgElement   SVG element to paint\n * @param {Displayable} displayable  zrender displayable element\n */\n\nShadowManager.prototype.addWithoutUpdate = function (svgElement, displayable) {\n  if (displayable && hasShadow(displayable.style)) {\n    var style = displayable.style; // Create dom in <defs> if not exists\n\n    var dom;\n\n    if (style._shadowDom) {\n      // Gradient exists\n      dom = style._shadowDom;\n      var defs = this.getDefs(true);\n\n      if (!defs.contains(style._shadowDom)) {\n        // _shadowDom is no longer in defs, recreate\n        this.addDom(dom);\n      }\n    } else {\n      // New dom\n      dom = this.add(displayable);\n    }\n\n    this.markUsed(displayable);\n    var id = dom.getAttribute('id');\n    svgElement.style.filter = 'url(#' + id + ')';\n  }\n};\n/**\n * Add a new shadow tag in <defs>\n *\n * @param {Displayable} displayable  zrender displayable element\n * @return {SVGFilterElement} created DOM\n */\n\n\nShadowManager.prototype.add = function (displayable) {\n  var dom = this.createElement('filter');\n  var style = displayable.style; // Set dom id with shadow id, since each shadow instance\n  // will have no more than one dom element.\n  // id may exists before for those dirty elements, in which case\n  // id should remain the same, and other attributes should be\n  // updated.\n\n  style._shadowDomId = style._shadowDomId || this.nextId++;\n  dom.setAttribute('id', 'zr' + this._zrId + '-shadow-' + style._shadowDomId);\n  this.updateDom(displayable, dom);\n  this.addDom(dom);\n  return dom;\n};\n/**\n * Update shadow.\n *\n * @param {Displayable} displayable  zrender displayable element\n */\n\n\nShadowManager.prototype.update = function (svgElement, displayable) {\n  var style = displayable.style;\n\n  if (hasShadow(style)) {\n    var that = this;\n    Definable.prototype.update.call(this, displayable, function (style) {\n      that.updateDom(displayable, style._shadowDom);\n    });\n  } else {\n    // Remove shadow\n    this.remove(svgElement, style);\n  }\n};\n/**\n * Remove DOM and clear parent filter\n */\n\n\nShadowManager.prototype.remove = function (svgElement, style) {\n  if (style._shadowDomId != null) {\n    this.removeDom(style);\n    svgElement.style.filter = '';\n  }\n};\n/**\n * Update shadow dom\n *\n * @param {Displayable} displayable  zrender displayable element\n * @param {SVGFilterElement} dom DOM to update\n */\n\n\nShadowManager.prototype.updateDom = function (displayable, dom) {\n  var domChild = dom.getElementsByTagName('feDropShadow');\n\n  if (domChild.length === 0) {\n    domChild = this.createElement('feDropShadow');\n  } else {\n    domChild = domChild[0];\n  }\n\n  var style = displayable.style;\n  var scaleX = displayable.scale ? displayable.scale[0] || 1 : 1;\n  var scaleY = displayable.scale ? displayable.scale[1] || 1 : 1; // TODO: textBoxShadowBlur is not supported yet\n\n  var offsetX, offsetY, blur, color;\n\n  if (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY) {\n    offsetX = style.shadowOffsetX || 0;\n    offsetY = style.shadowOffsetY || 0;\n    blur = style.shadowBlur;\n    color = style.shadowColor;\n  } else if (style.textShadowBlur) {\n    offsetX = style.textShadowOffsetX || 0;\n    offsetY = style.textShadowOffsetY || 0;\n    blur = style.textShadowBlur;\n    color = style.textShadowColor;\n  } else {\n    // Remove shadow\n    this.removeDom(dom, style);\n    return;\n  }\n\n  domChild.setAttribute('dx', offsetX / scaleX);\n  domChild.setAttribute('dy', offsetY / scaleY);\n  domChild.setAttribute('flood-color', color); // Divide by two here so that it looks the same as in canvas\n  // See: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-shadowblur\n\n  var stdDx = blur / 2 / scaleX;\n  var stdDy = blur / 2 / scaleY;\n  var stdDeviation = stdDx + ' ' + stdDy;\n  domChild.setAttribute('stdDeviation', stdDeviation); // Fix filter clipping problem\n\n  dom.setAttribute('x', '-100%');\n  dom.setAttribute('y', '-100%');\n  dom.setAttribute('width', Math.ceil(blur / 2 * 200) + '%');\n  dom.setAttribute('height', Math.ceil(blur / 2 * 200) + '%');\n  dom.appendChild(domChild); // Store dom element in shadow, to avoid creating multiple\n  // dom instances for the same shadow element\n\n  style._shadowDom = dom;\n};\n/**\n * Mark a single shadow to be used\n *\n * @param {Displayable} displayable displayable element\n */\n\n\nShadowManager.prototype.markUsed = function (displayable) {\n  var style = displayable.style;\n\n  if (style && style._shadowDom) {\n    Definable.prototype.markUsed.call(this, style._shadowDom);\n  }\n};\n\nfunction hasShadow(style) {\n  // TODO: textBoxShadowBlur is not supported yet\n  return style && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY || style.textShadowBlur || style.textShadowOffsetX || style.textShadowOffsetY);\n}\n\nvar _default = ShadowManager;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}