{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function render(angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function _axisLine(angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function _axisTick(angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function _axisLabel(angleAxisModel, polar, ticksAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function _splitLine(angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function _splitArea(angleAxisModel, polar, ticksAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/component/axis/AngleAxisView.js"],"names":["zrUtil","require","graphic","Model","AxisView","elementList","getAxisLineShape","polar","rExtent","angle","slice","reverse","start","coordToPoint","end","x1","y1","x2","y2","getRadiusIdx","radiusAxis","getRadiusAxis","inverse","fixAngleOverlap","list","firstItem","lastItem","length","Math","abs","coord","pop","_default","extend","type","axisPointerClass","render","angleAxisModel","ecModel","group","removeAll","get","angleAxis","axis","radiusExtent","getExtent","ticksAngles","getTicksCoords","labels","map","getViewLabels","labelItem","clone","dataToCoord","tickValue","each","name","scale","isBlank","_axisLine","lineStyleModel","getModel","circle","Circle","shape","cx","cy","r","style","getLineStyle","z2","silent","fill","add","_axisTick","tickModel","tickLen","radius","lines","tickAngleItem","Line","mergePath","defaults","stroke","_axisLabel","rawCategoryData","getCategories","commonLabelModel","labelMargin","idx","labelModel","p","labelTextAlign","labelTextVerticalAlign","textStyle","textEl","Text","setTextStyle","x","y","textFill","getTextColor","text","formattedLabel","textAlign","textVerticalAlign","_splitLine","splitLineModel","lineColors","lineCount","Array","splitLines","i","colorIndex","push","z","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","RADIAN","PI","prevAngle","r0","min","r1","max","clockwise","Sector","startAngle","endAngle","getAreaStyle","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n} // Remove the last tick which will overlap the first tick\n\n\nfunction fixAngleOverlap(list) {\n  var firstItem = list[0];\n  var lastItem = list[list.length - 1];\n\n  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 1e-4) {\n    list.pop();\n  }\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n    var labels = zrUtil.map(angleAxis.getViewLabels(), function (labelItem) {\n      var labelItem = zrUtil.clone(labelItem);\n      labelItem.coord = angleAxis.dataToCoord(labelItem.tickValue);\n      return labelItem;\n    });\n    fixAngleOverlap(labels);\n    fixAngleOverlap(ticksAngles);\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent, labels);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngleItem) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngleItem.coord)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent, labels) {\n    var rawCategoryData = angleAxisModel.getCategories(true);\n    var commonLabelModel = angleAxisModel.getModel('axisLabel');\n    var labelMargin = commonLabelModel.get('margin'); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    zrUtil.each(labels, function (labelItem, idx) {\n      var labelModel = commonLabelModel;\n      var tickValue = labelItem.tickValue;\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelItem.coord]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {\n        labelModel = new Model(rawCategoryData[tickValue].textStyle, commonLabelModel, commonLabelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labelItem.formattedLabel,\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i].coord)\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    if (!ticksAngles.length) {\n      return;\n    }\n\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0].coord * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i].coord * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i].coord * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}