{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\n\nfunction _default(seriesType) {\n  return {\n    getTargetSeries: function getTargetSeries(ecModel) {\n      // Pie and funnel may use diferrent scope\n      var paletteScope = {};\n      var seiresModelMap = createHashMap();\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n        seriesModel.__paletteScope = paletteScope;\n        seiresModelMap.set(seriesModel.uid, seriesModel);\n      });\n      return seiresModelMap;\n    },\n    reset: function reset(seriesModel, ecModel) {\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n\n        if (!singleDataColor) {\n          // FIXME Performance\n          var itemModel = dataAll.getItemModel(rawIdx);\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n      });\n    }\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/visual/dataColor.js"],"names":["_util","require","createHashMap","_default","seriesType","getTargetSeries","ecModel","paletteScope","seiresModelMap","eachSeriesByType","seriesModel","__paletteScope","set","uid","reset","dataAll","getRawData","idxMap","data","getData","each","idx","rawIdx","getRawIndex","filteredIdx","singleDataColor","getItemVisual","itemModel","getItemModel","color","get","getColorFromPalette","getName","count","setItemVisual","module","exports"],"mappings":"AACA;;;;;;;;;;;;;;;;;;AAmBA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AAEA,IAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,UAAlB,EAA8B;AAC5B,SAAO;AACLC,IAAAA,eAAe,EAAE,yBAAUC,OAAV,EAAmB;AAClC;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,cAAc,GAAGN,aAAa,EAAlC;AACAI,MAAAA,OAAO,CAACG,gBAAR,CAAyBL,UAAzB,EAAqC,UAAUM,WAAV,EAAuB;AAC1DA,QAAAA,WAAW,CAACC,cAAZ,GAA6BJ,YAA7B;AACAC,QAAAA,cAAc,CAACI,GAAf,CAAmBF,WAAW,CAACG,GAA/B,EAAoCH,WAApC;AACD,OAHD;AAIA,aAAOF,cAAP;AACD,KAVI;AAWLM,IAAAA,KAAK,EAAE,eAAUJ,WAAV,EAAuBJ,OAAvB,EAAgC;AACrC,UAAIS,OAAO,GAAGL,WAAW,CAACM,UAAZ,EAAd;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,IAAI,GAAGR,WAAW,CAACS,OAAZ,EAAX;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,YAAIC,MAAM,GAAGJ,IAAI,CAACK,WAAL,CAAiBF,GAAjB,CAAb;AACAJ,QAAAA,MAAM,CAACK,MAAD,CAAN,GAAiBD,GAAjB;AACD,OAHD;AAIAN,MAAAA,OAAO,CAACK,IAAR,CAAa,UAAUE,MAAV,EAAkB;AAC7B,YAAIE,WAAW,GAAGP,MAAM,CAACK,MAAD,CAAxB,CAD6B,CACK;;AAElC,YAAIG,eAAe,GAAGD,WAAW,IAAI,IAAf,IAAuBN,IAAI,CAACQ,aAAL,CAAmBF,WAAnB,EAAgC,OAAhC,EAAyC,IAAzC,CAA7C;;AAEA,YAAI,CAACC,eAAL,EAAsB;AACpB;AACA,cAAIE,SAAS,GAAGZ,OAAO,CAACa,YAAR,CAAqBN,MAArB,CAAhB;AACA,cAAIO,KAAK,GAAGF,SAAS,CAACG,GAAV,CAAc,iBAAd,KAAoCpB,WAAW,CAACqB,mBAAZ,CAAgChB,OAAO,CAACiB,OAAR,CAAgBV,MAAhB,KAA2BA,MAAM,GAAG,EAApE,EAAwEZ,WAAW,CAACC,cAApF,EAAoGI,OAAO,CAACkB,KAAR,EAApG,CAAhD,CAHoB,CAGkJ;;AAEtKlB,UAAAA,OAAO,CAACmB,aAAR,CAAsBZ,MAAtB,EAA8B,OAA9B,EAAuCO,KAAvC,EALoB,CAK2B;;AAE/C,cAAIL,WAAW,IAAI,IAAnB,EAAyB;AACvBN,YAAAA,IAAI,CAACgB,aAAL,CAAmBV,WAAnB,EAAgC,OAAhC,EAAyCK,KAAzC;AACD;AACF,SAVD,MAUO;AACL;AACAd,UAAAA,OAAO,CAACmB,aAAR,CAAsBZ,MAAtB,EAA8B,OAA9B,EAAuCG,eAAvC;AACD;AACF,OAnBD;AAoBD;AAvCI,GAAP;AAyCD;;AAEDU,MAAM,CAACC,OAAP,GAAiBjC,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\nfunction _default(seriesType) {\n  return {\n    getTargetSeries: function (ecModel) {\n      // Pie and funnel may use diferrent scope\n      var paletteScope = {};\n      var seiresModelMap = createHashMap();\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n        seriesModel.__paletteScope = paletteScope;\n        seiresModelMap.set(seriesModel.uid, seriesModel);\n      });\n      return seiresModelMap;\n    },\n    reset: function (seriesModel, ecModel) {\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n\n        if (!singleDataColor) {\n          // FIXME Performance\n          var itemModel = dataAll.getItemModel(rawIdx);\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n      });\n    }\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}