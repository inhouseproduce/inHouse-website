{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\nvar PI2 = Math.PI * 2;\nvar RADIAN = Math.PI / 180;\n\nfunction _default(seriesType, ecModel, api, payload) {\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    var center = seriesModel.get('center');\n    var radius = seriesModel.get('radius');\n\n    if (!zrUtil.isArray(radius)) {\n      radius = [0, radius];\n    }\n\n    if (!zrUtil.isArray(center)) {\n      center = [center, center];\n    }\n\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var size = Math.min(width, height);\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var r0 = parsePercent(radius[0], size / 2);\n    var r = parsePercent(radius[1], size / 2);\n    var startAngle = -seriesModel.get('startAngle') * RADIAN;\n    var minAngle = seriesModel.get('minAngle') * RADIAN;\n    var virtualRoot = seriesModel.getData().tree.root;\n    var treeRoot = seriesModel.getViewRoot();\n    var rootDepth = treeRoot.depth;\n    var sort = seriesModel.get('sort');\n\n    if (sort != null) {\n      initChildren(treeRoot, sort);\n    }\n\n    var validDataCount = 0;\n    zrUtil.each(treeRoot.children, function (child) {\n      !isNaN(child.getValue()) && validDataCount++;\n    });\n    var sum = treeRoot.getValue(); // Sum may be 0\n\n    var unitRadian = Math.PI / (sum || validDataCount) * 2;\n    var renderRollupNode = treeRoot.depth > 0;\n    var levels = treeRoot.height - (renderRollupNode ? -1 : 1);\n    var rPerLevel = (r - r0) / (levels || 1);\n    var clockwise = seriesModel.get('clockwise');\n    var stillShowZeroSum = seriesModel.get('stillShowZeroSum'); // In the case some sector angle is smaller than minAngle\n\n    var restAngle = PI2;\n    var valueSumLargerThanMinAngle = 0;\n    var dir = clockwise ? 1 : -1;\n    /**\n     * Render a tree\n     * @return increased angle\n     */\n\n    var renderNode = function renderNode(node, startAngle) {\n      if (!node) {\n        return;\n      }\n\n      var endAngle = startAngle; // Render self\n\n      if (node !== virtualRoot) {\n        // Tree node is virtual, so it doesn't need to be drawn\n        var value = node.getValue();\n        var angle = sum === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;\n\n        if (angle < minAngle) {\n          angle = minAngle;\n          restAngle -= minAngle;\n        } else {\n          valueSumLargerThanMinAngle += value;\n        }\n\n        endAngle = startAngle + dir * angle;\n        var depth = node.depth - rootDepth - (renderRollupNode ? -1 : 1);\n        var rStart = r0 + rPerLevel * depth;\n        var rEnd = r0 + rPerLevel * (depth + 1);\n        var itemModel = node.getModel();\n\n        if (itemModel.get('r0') != null) {\n          rStart = parsePercent(itemModel.get('r0'), size / 2);\n        }\n\n        if (itemModel.get('r') != null) {\n          rEnd = parsePercent(itemModel.get('r'), size / 2);\n        }\n\n        node.setLayout({\n          angle: angle,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          clockwise: clockwise,\n          cx: cx,\n          cy: cy,\n          r0: rStart,\n          r: rEnd\n        });\n      } // Render children\n\n\n      if (node.children && node.children.length) {\n        // currentAngle = startAngle;\n        var siblingAngle = 0;\n        zrUtil.each(node.children, function (node) {\n          siblingAngle += renderNode(node, startAngle + siblingAngle);\n        });\n      }\n\n      return endAngle - startAngle;\n    }; // Virtual root node for roll up\n\n\n    if (renderRollupNode) {\n      var rStart = r0;\n      var rEnd = r0 + rPerLevel;\n      var angle = Math.PI * 2;\n      virtualRoot.setLayout({\n        angle: angle,\n        startAngle: startAngle,\n        endAngle: startAngle + angle,\n        clockwise: clockwise,\n        cx: cx,\n        cy: cy,\n        r0: rStart,\n        r: rEnd\n      });\n    }\n\n    renderNode(treeRoot, startAngle);\n  });\n}\n/**\n * Init node children by order and update visual\n *\n * @param {TreeNode} node  root node\n * @param {boolean}  isAsc if is in ascendant order\n */\n\n\nfunction initChildren(node, isAsc) {\n  var children = node.children || [];\n  node.children = sort(children, isAsc); // Init children recursively\n\n  if (children.length) {\n    zrUtil.each(node.children, function (child) {\n      initChildren(child, isAsc);\n    });\n  }\n}\n/**\n * Sort children nodes\n *\n * @param {TreeNode[]}               children children of node to be sorted\n * @param {string | function | null} sort sort method\n *                                   See SunburstSeries.js for details.\n */\n\n\nfunction sort(children, sortOrder) {\n  if (typeof sortOrder === 'function') {\n    return children.sort(sortOrder);\n  } else {\n    var isAsc = sortOrder === 'asc';\n    return children.sort(function (a, b) {\n      var diff = (a.getValue() - b.getValue()) * (isAsc ? 1 : -1);\n      return diff === 0 ? (a.dataIndex - b.dataIndex) * (isAsc ? -1 : 1) : diff;\n    });\n  }\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/chart/sunburst/sunburstLayout.js"],"names":["_number","require","parsePercent","zrUtil","PI2","Math","PI","RADIAN","_default","seriesType","ecModel","api","payload","eachSeriesByType","seriesModel","center","get","radius","isArray","width","getWidth","height","getHeight","size","min","cx","cy","r0","r","startAngle","minAngle","virtualRoot","getData","tree","root","treeRoot","getViewRoot","rootDepth","depth","sort","initChildren","validDataCount","each","children","child","isNaN","getValue","sum","unitRadian","renderRollupNode","levels","rPerLevel","clockwise","stillShowZeroSum","restAngle","valueSumLargerThanMinAngle","dir","renderNode","node","endAngle","value","angle","rStart","rEnd","itemModel","getModel","setLayout","length","siblingAngle","isAsc","sortOrder","a","b","diff","dataIndex","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PI2 = Math.PI * 2;\nvar RADIAN = Math.PI / 180;\n\nfunction _default(seriesType, ecModel, api, payload) {\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    var center = seriesModel.get('center');\n    var radius = seriesModel.get('radius');\n\n    if (!zrUtil.isArray(radius)) {\n      radius = [0, radius];\n    }\n\n    if (!zrUtil.isArray(center)) {\n      center = [center, center];\n    }\n\n    var width = api.getWidth();\n    var height = api.getHeight();\n    var size = Math.min(width, height);\n    var cx = parsePercent(center[0], width);\n    var cy = parsePercent(center[1], height);\n    var r0 = parsePercent(radius[0], size / 2);\n    var r = parsePercent(radius[1], size / 2);\n    var startAngle = -seriesModel.get('startAngle') * RADIAN;\n    var minAngle = seriesModel.get('minAngle') * RADIAN;\n    var virtualRoot = seriesModel.getData().tree.root;\n    var treeRoot = seriesModel.getViewRoot();\n    var rootDepth = treeRoot.depth;\n    var sort = seriesModel.get('sort');\n\n    if (sort != null) {\n      initChildren(treeRoot, sort);\n    }\n\n    var validDataCount = 0;\n    zrUtil.each(treeRoot.children, function (child) {\n      !isNaN(child.getValue()) && validDataCount++;\n    });\n    var sum = treeRoot.getValue(); // Sum may be 0\n\n    var unitRadian = Math.PI / (sum || validDataCount) * 2;\n    var renderRollupNode = treeRoot.depth > 0;\n    var levels = treeRoot.height - (renderRollupNode ? -1 : 1);\n    var rPerLevel = (r - r0) / (levels || 1);\n    var clockwise = seriesModel.get('clockwise');\n    var stillShowZeroSum = seriesModel.get('stillShowZeroSum'); // In the case some sector angle is smaller than minAngle\n\n    var restAngle = PI2;\n    var valueSumLargerThanMinAngle = 0;\n    var dir = clockwise ? 1 : -1;\n    /**\n     * Render a tree\n     * @return increased angle\n     */\n\n    var renderNode = function (node, startAngle) {\n      if (!node) {\n        return;\n      }\n\n      var endAngle = startAngle; // Render self\n\n      if (node !== virtualRoot) {\n        // Tree node is virtual, so it doesn't need to be drawn\n        var value = node.getValue();\n        var angle = sum === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;\n\n        if (angle < minAngle) {\n          angle = minAngle;\n          restAngle -= minAngle;\n        } else {\n          valueSumLargerThanMinAngle += value;\n        }\n\n        endAngle = startAngle + dir * angle;\n        var depth = node.depth - rootDepth - (renderRollupNode ? -1 : 1);\n        var rStart = r0 + rPerLevel * depth;\n        var rEnd = r0 + rPerLevel * (depth + 1);\n        var itemModel = node.getModel();\n\n        if (itemModel.get('r0') != null) {\n          rStart = parsePercent(itemModel.get('r0'), size / 2);\n        }\n\n        if (itemModel.get('r') != null) {\n          rEnd = parsePercent(itemModel.get('r'), size / 2);\n        }\n\n        node.setLayout({\n          angle: angle,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          clockwise: clockwise,\n          cx: cx,\n          cy: cy,\n          r0: rStart,\n          r: rEnd\n        });\n      } // Render children\n\n\n      if (node.children && node.children.length) {\n        // currentAngle = startAngle;\n        var siblingAngle = 0;\n        zrUtil.each(node.children, function (node) {\n          siblingAngle += renderNode(node, startAngle + siblingAngle);\n        });\n      }\n\n      return endAngle - startAngle;\n    }; // Virtual root node for roll up\n\n\n    if (renderRollupNode) {\n      var rStart = r0;\n      var rEnd = r0 + rPerLevel;\n      var angle = Math.PI * 2;\n      virtualRoot.setLayout({\n        angle: angle,\n        startAngle: startAngle,\n        endAngle: startAngle + angle,\n        clockwise: clockwise,\n        cx: cx,\n        cy: cy,\n        r0: rStart,\n        r: rEnd\n      });\n    }\n\n    renderNode(treeRoot, startAngle);\n  });\n}\n/**\n * Init node children by order and update visual\n *\n * @param {TreeNode} node  root node\n * @param {boolean}  isAsc if is in ascendant order\n */\n\n\nfunction initChildren(node, isAsc) {\n  var children = node.children || [];\n  node.children = sort(children, isAsc); // Init children recursively\n\n  if (children.length) {\n    zrUtil.each(node.children, function (child) {\n      initChildren(child, isAsc);\n    });\n  }\n}\n/**\n * Sort children nodes\n *\n * @param {TreeNode[]}               children children of node to be sorted\n * @param {string | function | null} sort sort method\n *                                   See SunburstSeries.js for details.\n */\n\n\nfunction sort(children, sortOrder) {\n  if (typeof sortOrder === 'function') {\n    return children.sort(sortOrder);\n  } else {\n    var isAsc = sortOrder === 'asc';\n    return children.sort(function (a, b) {\n      var diff = (a.getValue() - b.getValue()) * (isAsc ? 1 : -1);\n      return diff === 0 ? (a.dataIndex - b.dataIndex) * (isAsc ? -1 : 1) : diff;\n    });\n  }\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}