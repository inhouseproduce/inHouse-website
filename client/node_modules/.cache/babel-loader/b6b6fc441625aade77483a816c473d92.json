{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createListSimply = require(\"../helper/createListSimply\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar RadarSeries = SeriesModel.extend({\n  type: 'series.radar',\n  dependencies: ['radar'],\n  // Overwrite\n  init: function init(option) {\n    RadarSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n    this.legendDataProvider = function () {\n      return this.getRawData();\n    };\n  },\n  getInitialData: function getInitialData(option, ecModel) {\n    return createListSimply(this, {\n      generateCoord: 'indicator_',\n      generateCoordCount: Infinity\n    });\n  },\n  formatTooltip: function formatTooltip(dataIndex) {\n    var data = this.getData();\n    var coordSys = this.coordinateSystem;\n    var indicatorAxes = coordSys.getIndicatorAxes();\n    var name = this.getData().getName(dataIndex);\n    return encodeHTML(name === '' ? this.name : name) + '<br/>' + zrUtil.map(indicatorAxes, function (axis, idx) {\n      var val = data.get(data.mapDimension(axis.dim), dataIndex);\n      return encodeHTML(axis.name + ' : ' + val);\n    }).join('<br />');\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'radar',\n    legendHoverLink: true,\n    radarIndex: 0,\n    lineStyle: {\n      width: 2,\n      type: 'solid'\n    },\n    label: {\n      position: 'top'\n    },\n    // areaStyle: {\n    // },\n    // itemStyle: {}\n    symbol: 'emptyCircle',\n    symbolSize: 4 // symbolRotate: null\n\n  }\n});\nvar _default = RadarSeries;\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/chart/radar/RadarSeries.js"],"names":["SeriesModel","require","createListSimply","zrUtil","_format","encodeHTML","RadarSeries","extend","type","dependencies","init","option","superApply","arguments","legendDataProvider","getRawData","getInitialData","ecModel","generateCoord","generateCoordCount","Infinity","formatTooltip","dataIndex","data","getData","coordSys","coordinateSystem","indicatorAxes","getIndicatorAxes","name","getName","map","axis","idx","val","get","mapDimension","dim","join","defaultOption","zlevel","z","legendHoverLink","radarIndex","lineStyle","width","label","position","symbol","symbolSize","_default","module","exports"],"mappings":"AACA;;;;;;;;;;;;;;;;;;AAmBA,IAAIA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AAEA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,4BAAD,CAA9B;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAII,UAAU,GAAGD,OAAO,CAACC,UAAzB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,WAAW,GAAGN,WAAW,CAACO,MAAZ,CAAmB;AACnCC,EAAAA,IAAI,EAAE,cAD6B;AAEnCC,EAAAA,YAAY,EAAE,CAAC,OAAD,CAFqB;AAGnC;AACAC,EAAAA,IAAI,EAAE,cAAUC,MAAV,EAAkB;AACtBL,IAAAA,WAAW,CAACM,UAAZ,CAAuB,IAAvB,EAA6B,MAA7B,EAAqCC,SAArC,EADsB,CAC2B;AACjD;;AAEA,SAAKC,kBAAL,GAA0B,YAAY;AACpC,aAAO,KAAKC,UAAL,EAAP;AACD,KAFD;AAGD,GAXkC;AAYnCC,EAAAA,cAAc,EAAE,wBAAUL,MAAV,EAAkBM,OAAlB,EAA2B;AACzC,WAAOf,gBAAgB,CAAC,IAAD,EAAO;AAC5BgB,MAAAA,aAAa,EAAE,YADa;AAE5BC,MAAAA,kBAAkB,EAAEC;AAFQ,KAAP,CAAvB;AAID,GAjBkC;AAkBnCC,EAAAA,aAAa,EAAE,uBAAUC,SAAV,EAAqB;AAClC,QAAIC,IAAI,GAAG,KAAKC,OAAL,EAAX;AACA,QAAIC,QAAQ,GAAG,KAAKC,gBAApB;AACA,QAAIC,aAAa,GAAGF,QAAQ,CAACG,gBAAT,EAApB;AACA,QAAIC,IAAI,GAAG,KAAKL,OAAL,GAAeM,OAAf,CAAuBR,SAAvB,CAAX;AACA,WAAOjB,UAAU,CAACwB,IAAI,KAAK,EAAT,GAAc,KAAKA,IAAnB,GAA0BA,IAA3B,CAAV,GAA6C,OAA7C,GAAuD1B,MAAM,CAAC4B,GAAP,CAAWJ,aAAX,EAA0B,UAAUK,IAAV,EAAgBC,GAAhB,EAAqB;AAC3G,UAAIC,GAAG,GAAGX,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,YAAL,CAAkBJ,IAAI,CAACK,GAAvB,CAAT,EAAsCf,SAAtC,CAAV;AACA,aAAOjB,UAAU,CAAC2B,IAAI,CAACH,IAAL,GAAY,KAAZ,GAAoBK,GAArB,CAAjB;AACD,KAH6D,EAG3DI,IAH2D,CAGtD,QAHsD,CAA9D;AAID,GA3BkC;AA4BnCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,CADK;AAEbC,IAAAA,CAAC,EAAE,CAFU;AAGbf,IAAAA,gBAAgB,EAAE,OAHL;AAIbgB,IAAAA,eAAe,EAAE,IAJJ;AAKbC,IAAAA,UAAU,EAAE,CALC;AAMbC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,CADE;AAETrC,MAAAA,IAAI,EAAE;AAFG,KANE;AAUbsC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL,KAVM;AAab;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,aAhBK;AAiBbC,IAAAA,UAAU,EAAE,CAjBC,CAiBC;;AAjBD;AA5BoB,CAAnB,CAAlB;AAiDA,IAAIC,QAAQ,GAAG5C,WAAf;AACA6C,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createListSimply = require(\"../helper/createListSimply\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar RadarSeries = SeriesModel.extend({\n  type: 'series.radar',\n  dependencies: ['radar'],\n  // Overwrite\n  init: function (option) {\n    RadarSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n    this.legendDataProvider = function () {\n      return this.getRawData();\n    };\n  },\n  getInitialData: function (option, ecModel) {\n    return createListSimply(this, {\n      generateCoord: 'indicator_',\n      generateCoordCount: Infinity\n    });\n  },\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var coordSys = this.coordinateSystem;\n    var indicatorAxes = coordSys.getIndicatorAxes();\n    var name = this.getData().getName(dataIndex);\n    return encodeHTML(name === '' ? this.name : name) + '<br/>' + zrUtil.map(indicatorAxes, function (axis, idx) {\n      var val = data.get(data.mapDimension(axis.dim), dataIndex);\n      return encodeHTML(axis.name + ' : ' + val);\n    }).join('<br />');\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'radar',\n    legendHoverLink: true,\n    radarIndex: 0,\n    lineStyle: {\n      width: 2,\n      type: 'solid'\n    },\n    label: {\n      position: 'top'\n    },\n    // areaStyle: {\n    // },\n    // itemStyle: {}\n    symbol: 'emptyCircle',\n    symbolSize: 4 // symbolRotate: null\n\n  }\n});\nvar _default = RadarSeries;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}