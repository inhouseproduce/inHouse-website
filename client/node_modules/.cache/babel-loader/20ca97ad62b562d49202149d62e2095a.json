{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file The layout algorithm of sankey view\n * @author Deqing Li(annong035@gmail.com)\n */\n\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          y: x\n        }, true);\n        node.setLayout({\n          dy: nodeWidth\n        }, true);\n      } else {\n        node.setLayout({\n          x: x\n        }, true);\n        node.setLayout({\n          dx: nodeWidth\n        }, true);\n      }\n\n      for (var oidx = 0; oidx < node.outEdges.length; oidx++) {\n        var edge = node.outEdges[oidx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0) {\n          nextNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextNode;\n    nextNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {}\n\n  moveSinksRight(nodes, x, orient);\n\n  if (orient === 'vertical') {\n    kx = (height - nodeWidth) / (x - 1);\n  } else {\n    kx = (width - nodeWidth) / (x - 1);\n  }\n\n  scaleNodeBreadths(nodes, kx, orient);\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} x  value (x-1) use to assign to node without outEdges\n *     as x-position\n */\n\n\nfunction moveSinksRight(nodes, x, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (!node.outEdges.length) {\n      if (orient === 'vertical') {\n        node.setLayout({\n          y: x - 1\n        }, true);\n      } else {\n        node.setLayout({\n          x: x - 1\n        }, true);\n      }\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (orient === 'vertical') {\n      var nodeY = node.getLayout().y * kx;\n      node.setLayout({\n        y: nodeY\n      }, true);\n    } else {\n      var nodeX = node.getLayout().x * kx;\n      node.setLayout({\n        x: nodeX\n      }, true);\n    }\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodes, nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodes, nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var kyArray = [];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    var ky = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n\n    if (orient === 'vertical') {\n      ky = (width - (n - 1) * nodeGap) / sum;\n    } else {\n      ky = (height - (n - 1) * nodeGap) / sum;\n    }\n\n    kyArray.push(ky);\n  });\n  kyArray.sort(function (a, b) {\n    return a - b;\n  });\n  var ky0 = kyArray[0];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * ky0;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * ky0;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var i;\n\n    if (orient === 'vertical') {\n      var nodeX;\n      nodes.sort(function (a, b) {\n        return a.getLayout().x - b.getLayout().x;\n      });\n\n      for (i = 0; i < n; i++) {\n        node = nodes[i];\n        dy = y0 - node.getLayout().x;\n\n        if (dy > 0) {\n          nodeX = node.getLayout().x + dy;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout().x + node.getLayout().dx + nodeGap;\n      } // If the bottommost node goes outside the bounds, push it back up\n\n\n      dy = y0 - nodeGap - width;\n\n      if (dy > 0) {\n        nodeX = node.getLayout().x - dy;\n        node.setLayout({\n          x: nodeX\n        }, true);\n        y0 = nodeX;\n\n        for (i = n - 2; i >= 0; --i) {\n          node = nodes[i];\n          dy = node.getLayout().x + node.getLayout().dx + nodeGap - y0;\n\n          if (dy > 0) {\n            nodeX = node.getLayout().x - dy;\n            node.setLayout({\n              x: nodeX\n            }, true);\n          }\n\n          y0 = node.getLayout().x;\n        }\n      }\n    } else {\n      var nodeY;\n      nodes.sort(function (a, b) {\n        return a.getLayout().y - b.getLayout().y;\n      });\n\n      for (i = 0; i < n; i++) {\n        node = nodes[i];\n        dy = y0 - node.getLayout().y;\n\n        if (dy > 0) {\n          nodeY = node.getLayout().y + dy;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n\n        y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\n      } // If the bottommost node goes outside the bounds, push it back up\n\n\n      dy = y0 - nodeGap - height;\n\n      if (dy > 0) {\n        nodeY = node.getLayout().y - dy;\n        node.setLayout({\n          y: nodeY\n        }, true);\n        y0 = nodeY;\n\n        for (i = n - 2; i >= 0; --i) {\n          node = nodes[i];\n          dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\n\n          if (dy > 0) {\n            nodeY = node.getLayout().y - dy;\n            node.setLayout({\n              y: nodeY\n            }, true);\n          }\n\n          y0 = node.getLayout().y;\n        }\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction center(node, orient) {\n  if (orient === 'vertical') {\n    return node.getLayout().x + node.getLayout().dx / 2;\n  }\n\n  return node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, f, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (orient === 'vertical') {\n      node.outEdges.sort(function (a, b) {\n        return a.node2.getLayout().x - b.node2.getLayout().x;\n      });\n      node.inEdges.sort(function (a, b) {\n        return a.node1.getLayout().x - b.node1.getLayout().x;\n      });\n    } else {\n      node.outEdges.sort(function (a, b) {\n        return a.node2.getLayout().y - b.node2.getLayout().y;\n      });\n      node.inEdges.sort(function (a, b) {\n        return a.node1.getLayout().y - b.node1.getLayout().y;\n      });\n    }\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/chart/sankey/sankeyLayout.js"],"names":["layout","require","zrUtil","_model","groupData","_config","__DEV__","_default","ecModel","api","payload","eachSeriesByType","seriesModel","nodeWidth","get","nodeGap","layoutInfo","getViewRect","width","height","graph","getGraph","nodes","edges","computeNodeValues","filteredNodes","filter","node","getLayout","value","iterations","length","orient","layoutSankey","getLayoutRect","getBoxLayoutParams","getWidth","getHeight","computeNodeBreadths","computeNodeDepths","computeEdgeDepths","each","value1","sum","outEdges","getEdgeValue","value2","inEdges","Math","max","setLayout","remainEdges","indegreeArr","zeroIndegrees","nextNode","x","kx","i","push","idx","y","dy","dx","oidx","edge","indexEdge","indexOf","targetNode","node2","nodeIndex","moveSinksRight","scaleNodeBreadths","nodeY","nodeX","nodesByBreadth","prepareNodesByBreadth","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","keyAttr","groupResult","keys","sort","a","b","key","buckets","kyArray","n","ky","ky0","nodeDy","edgeDy","getValue","y0","slice","reverse","weightedTarget","center","weightedSource","node1","array","f","len","call","isNaN","sy","ty","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar layout = require(\"../../util/layout\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar groupData = _model.groupData;\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @file The layout algorithm of sankey view\n * @author Deqing Li(annong035@gmail.com)\n */\nfunction _default(ecModel, api, payload) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var layoutInfo = getViewRect(seriesModel, api);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient);\n  });\n}\n/**\n * Get the layout position of the whole view\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var value = Math.max(value1, value2);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param  {number} nodeWidth  the dx of the node\n * @param  {number} width  the whole width of the area to draw the view\n */\n\n\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = []; // Storage each node's indegree.\n\n  var indegreeArr = []; //Used to storage the node with indegree is equal to 0.\n\n  var zeroIndegrees = [];\n  var nextNode = [];\n  var x = 0;\n  var kx = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n\n  for (i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          y: x\n        }, true);\n        node.setLayout({\n          dy: nodeWidth\n        }, true);\n      } else {\n        node.setLayout({\n          x: x\n        }, true);\n        node.setLayout({\n          dx: nodeWidth\n        }, true);\n      }\n\n      for (var oidx = 0; oidx < node.outEdges.length; oidx++) {\n        var edge = node.outEdges[oidx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n\n        if (--indegreeArr[nodeIndex] === 0) {\n          nextNode.push(targetNode);\n        }\n      }\n    }\n\n    ++x;\n    zeroIndegrees = nextNode;\n    nextNode = [];\n  }\n\n  for (i = 0; i < remainEdges.length; i++) {}\n\n  moveSinksRight(nodes, x, orient);\n\n  if (orient === 'vertical') {\n    kx = (height - nodeWidth) / (x - 1);\n  } else {\n    kx = (width - nodeWidth) / (x - 1);\n  }\n\n  scaleNodeBreadths(nodes, kx, orient);\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} x  value (x-1) use to assign to node without outEdges\n *     as x-position\n */\n\n\nfunction moveSinksRight(nodes, x, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (!node.outEdges.length) {\n      if (orient === 'vertical') {\n        node.setLayout({\n          y: x - 1\n        }, true);\n      } else {\n        node.setLayout({\n          x: x - 1\n        }, true);\n      }\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {number} kx   multiple used to scale nodes\n */\n\n\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (orient === 'vertical') {\n      var nodeY = node.getLayout().y * kx;\n      node.setLayout({\n        y: nodeY\n      }, true);\n    } else {\n      var nodeX = node.getLayout().x * kx;\n      node.setLayout({\n        x: nodeX\n      }, true);\n    }\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param {number} iterations  the number of iterations for the algorithm\n */\n\n\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodes, nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\n\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n * @param {number} height  the whole height of the area to draw the view\n * @param {number} nodeGap  the vertical distance between two nodes\n */\n\n\nfunction initializeNodeDepth(nodes, nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var kyArray = [];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    var ky = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n\n    if (orient === 'vertical') {\n      ky = (width - (n - 1) * nodeGap) / sum;\n    } else {\n      ky = (height - (n - 1) * nodeGap) / sum;\n    }\n\n    kyArray.push(ky);\n  });\n  kyArray.sort(function (a, b) {\n    return a - b;\n  });\n  var ky0 = kyArray[0];\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * ky0;\n\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * ky0;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the nodes x-position.\n * @param {number} nodeGap  the vertical distance between two nodes\n * @param {number} height  the whole height of the area to draw the view\n */\n\n\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var i;\n\n    if (orient === 'vertical') {\n      var nodeX;\n      nodes.sort(function (a, b) {\n        return a.getLayout().x - b.getLayout().x;\n      });\n\n      for (i = 0; i < n; i++) {\n        node = nodes[i];\n        dy = y0 - node.getLayout().x;\n\n        if (dy > 0) {\n          nodeX = node.getLayout().x + dy;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        }\n\n        y0 = node.getLayout().x + node.getLayout().dx + nodeGap;\n      } // If the bottommost node goes outside the bounds, push it back up\n\n\n      dy = y0 - nodeGap - width;\n\n      if (dy > 0) {\n        nodeX = node.getLayout().x - dy;\n        node.setLayout({\n          x: nodeX\n        }, true);\n        y0 = nodeX;\n\n        for (i = n - 2; i >= 0; --i) {\n          node = nodes[i];\n          dy = node.getLayout().x + node.getLayout().dx + nodeGap - y0;\n\n          if (dy > 0) {\n            nodeX = node.getLayout().x - dy;\n            node.setLayout({\n              x: nodeX\n            }, true);\n          }\n\n          y0 = node.getLayout().x;\n        }\n      }\n    } else {\n      var nodeY;\n      nodes.sort(function (a, b) {\n        return a.getLayout().y - b.getLayout().y;\n      });\n\n      for (i = 0; i < n; i++) {\n        node = nodes[i];\n        dy = y0 - node.getLayout().y;\n\n        if (dy > 0) {\n          nodeY = node.getLayout().y + dy;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n\n        y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\n      } // If the bottommost node goes outside the bounds, push it back up\n\n\n      dy = y0 - nodeGap - height;\n\n      if (dy > 0) {\n        nodeY = node.getLayout().y - dy;\n        node.setLayout({\n          y: nodeY\n        }, true);\n        y0 = nodeY;\n\n        for (i = n - 2; i >= 0; --i) {\n          node = nodes[i];\n          dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\n\n          if (dy > 0) {\n            nodeY = node.getLayout().y - dy;\n            node.setLayout({\n              y: nodeY\n            }, true);\n          }\n\n          y0 = node.getLayout().y;\n        }\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\n\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\n\nfunction center(node, orient) {\n  if (orient === 'vertical') {\n    return node.getLayout().x + node.getLayout().dx / 2;\n  }\n\n  return node.getLayout().y + node.getLayout().dy / 2;\n}\n\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\n\nfunction sum(array, f, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n\n  while (++i < len) {\n    var value = +f.call(array, array[i], orient);\n\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n *\n * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n *     group by the array of all sankey nodes based on the node x-position.\n * @param {number} alpha  parameter used to adjust the nodes y-position\n */\n\n\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue, orient);\n\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n *\n * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n */\n\n\nfunction computeEdgeDepths(nodes, orient) {\n  zrUtil.each(nodes, function (node) {\n    if (orient === 'vertical') {\n      node.outEdges.sort(function (a, b) {\n        return a.node2.getLayout().x - b.node2.getLayout().x;\n      });\n      node.inEdges.sort(function (a, b) {\n        return a.node1.getLayout().x - b.node1.getLayout().x;\n      });\n    } else {\n      node.outEdges.sort(function (a, b) {\n        return a.node2.getLayout().y - b.node2.getLayout().y;\n      });\n      node.inEdges.sort(function (a, b) {\n        return a.node1.getLayout().y - b.node1.getLayout().y;\n      });\n    }\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}