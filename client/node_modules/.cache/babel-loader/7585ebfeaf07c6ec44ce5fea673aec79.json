{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar isString = _util.isString;\nvar defaults = _util.defaults;\nvar extend = _util.extend;\nvar isObject = _util.isObject;\nvar clone = _util.clone;\n\nvar _model = require(\"../../util/model\");\n\nvar normalizeToArray = _model.normalizeToArray;\n\nvar _sourceHelper = require(\"./sourceHelper\");\n\nvar guessOrdinal = _sourceHelper.guessOrdinal;\n\nvar Source = require(\"../Source\");\n\nvar _dimensionHelper = require(\"./dimensionHelper\");\n\nvar OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\n\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * Complete the dimensions array, by user defined `dimension` and `encode`,\n * and guessing from the data structure.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *                 If not specified, extra dim names will be:\n *                 'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *                 If `generateCoordCount` specified, the generated dim names will be:\n *                 `generateCoord` + 0, `generateCoord` + 1, ...\n *                 can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @param {number} [opt.encodeDefaulter] If not specified, auto find the next available data dim.\n * @return {Array.<Object>} [{\n *      name: string mandatory,\n *      displayName: string, the origin name in dimsDef, see source helper.\n *                 If displayName given, the tooltip will displayed vertically.\n *      coordDim: string mandatory,\n *      coordDimIndex: number mandatory,\n *      type: string optional,\n *      otherDims: { never null/undefined\n *          tooltip: number optional,\n *          label: number optional,\n *          itemName: number optional,\n *          seriesName: number optional,\n *      },\n *      isExtraCoord: boolean true if coord is generated\n *          (not specified in encode and not series specified)\n *      other props ...\n * }]\n */\n\nfunction completeDimensions(sysDims, source, opt) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var encodeDef = createHashMap(opt.encodeDef);\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // var valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {\n      name: dimsDef[i]\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = {\n      otherDims: {}\n    }; // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  } // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n\n\n  encodeDef.each(function (dataDims, coordDim) {\n    dataDims = normalizeToArray(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && dataDims[0] < 0) {\n      encodeDef.set(coordDim, false);\n      return;\n    }\n\n    var validDataDims = encodeDef.set(coordDim, []);\n    each(dataDims, function (resultDimIdx, idx) {\n      // The input resultDimIdx can be dim name or index.\n      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItem, sysDimIndex) {\n    var coordDim;\n    var sysDimItem;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n\n    if (isString(sysDimItem)) {\n      coordDim = sysDimItem;\n      sysDimItem = {};\n    } else {\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n\n    var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n\n    var dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (OTHER_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n    var coordDim = resultItem.coordDim;\n\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n\n      generateCoordCount--;\n    }\n\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));\n\n    if (resultItem.type == null && guessOrdinal(source, resultDimIdx, resultItem.name)) {\n      resultItem.type = 'ordinal';\n    }\n  }\n\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef = sysDimItem.dimsDef;\n    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n  });\n  return dimCount;\n}\n\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n\n    while (map.get(name + i) != null) {\n      i++;\n    }\n\n    name += i;\n  }\n\n  map.set(name, true);\n  return name;\n}\n\nvar _default = completeDimensions;\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/data/helper/completeDimensions.js"],"names":["_util","require","createHashMap","each","isString","defaults","extend","isObject","clone","_model","normalizeToArray","_sourceHelper","guessOrdinal","Source","_dimensionHelper","OTHER_DIMENSIONS","completeDimensions","sysDims","source","opt","isInstance","seriesDataToSource","slice","dimsDef","encodeDef","dataDimNameMap","coordDimNameMap","result","dimCount","getDimCount","i","dimDefItem","name","userDimName","resultItem","otherDims","get","displayName","set","type","dataDims","coordDim","length","validDataDims","resultDimIdx","idx","applyDim","availDimIdx","sysDimItem","sysDimIndex","sysDimItemDimsDef","sysDimItemOtherDims","ordinalMeta","coordDimIndex","push","sysDimItemDimsDefItem","defaultTooltip","generateCoord","generateCoordCount","fromZero","extra","genName","isExtraCoord","optDimCount","Math","max","dimensionsDetectCount","map","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar isString = _util.isString;\nvar defaults = _util.defaults;\nvar extend = _util.extend;\nvar isObject = _util.isObject;\nvar clone = _util.clone;\n\nvar _model = require(\"../../util/model\");\n\nvar normalizeToArray = _model.normalizeToArray;\n\nvar _sourceHelper = require(\"./sourceHelper\");\n\nvar guessOrdinal = _sourceHelper.guessOrdinal;\n\nvar Source = require(\"../Source\");\n\nvar _dimensionHelper = require(\"./dimensionHelper\");\n\nvar OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\n\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * Complete the dimensions array, by user defined `dimension` and `encode`,\n * and guessing from the data structure.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *                 If not specified, extra dim names will be:\n *                 'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *                 If `generateCoordCount` specified, the generated dim names will be:\n *                 `generateCoord` + 0, `generateCoord` + 1, ...\n *                 can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @param {number} [opt.encodeDefaulter] If not specified, auto find the next available data dim.\n * @return {Array.<Object>} [{\n *      name: string mandatory,\n *      displayName: string, the origin name in dimsDef, see source helper.\n *                 If displayName given, the tooltip will displayed vertically.\n *      coordDim: string mandatory,\n *      coordDimIndex: number mandatory,\n *      type: string optional,\n *      otherDims: { never null/undefined\n *          tooltip: number optional,\n *          label: number optional,\n *          itemName: number optional,\n *          seriesName: number optional,\n *      },\n *      isExtraCoord: boolean true if coord is generated\n *          (not specified in encode and not series specified)\n *      other props ...\n * }]\n */\nfunction completeDimensions(sysDims, source, opt) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var encodeDef = createHashMap(opt.encodeDef);\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // var valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {\n      name: dimsDef[i]\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = {\n      otherDims: {}\n    }; // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  } // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n\n\n  encodeDef.each(function (dataDims, coordDim) {\n    dataDims = normalizeToArray(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && dataDims[0] < 0) {\n      encodeDef.set(coordDim, false);\n      return;\n    }\n\n    var validDataDims = encodeDef.set(coordDim, []);\n    each(dataDims, function (resultDimIdx, idx) {\n      // The input resultDimIdx can be dim name or index.\n      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItem, sysDimIndex) {\n    var coordDim;\n    var sysDimItem;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n\n    if (isString(sysDimItem)) {\n      coordDim = sysDimItem;\n      sysDimItem = {};\n    } else {\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n\n    var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n\n    var dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (OTHER_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};\n    var coordDim = resultItem.coordDim;\n\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n\n      generateCoordCount--;\n    }\n\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));\n\n    if (resultItem.type == null && guessOrdinal(source, resultDimIdx, resultItem.name)) {\n      resultItem.type = 'ordinal';\n    }\n  }\n\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef = sysDimItem.dimsDef;\n    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n  });\n  return dimCount;\n}\n\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n\n    while (map.get(name + i) != null) {\n      i++;\n    }\n\n    name += i;\n  }\n\n  map.set(name, true);\n  return name;\n}\n\nvar _default = completeDimensions;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}