{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar echarts = require(\"../../echarts\");\n\nvar SymbolDraw = require(\"../helper/SymbolDraw\");\n\nvar LargeSymbolDraw = require(\"../helper/LargeSymbolDraw\");\n\nvar pointsLayout = require(\"../../layout/points\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\necharts.extendChartView({\n  type: 'scatter',\n  render: function render(seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.updateData(data);\n    this._finished = true;\n  },\n  incrementalPrepareRender: function incrementalPrepareRender(seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.incrementalPrepareUpdate(data);\n    this._finished = false;\n  },\n  incrementalRender: function incrementalRender(taskParams, seriesModel, ecModel) {\n    this._symbolDraw.incrementalUpdate(taskParams, seriesModel.getData());\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  },\n  updateTransform: function updateTransform(seriesModel, ecModel, api) {\n    var data = seriesModel.getData(); // Must mark group dirty and make sure the incremental layer will be cleared\n    // PENDING\n\n    this.group.dirty();\n\n    if (!this._finished || data.count() > 1e4 || !this._symbolDraw.isPersistent()) {\n      return {\n        update: true\n      };\n    } else {\n      var res = pointsLayout().reset(seriesModel);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count()\n        }, data);\n      }\n\n      this._symbolDraw.updateLayout(data);\n    }\n  },\n  _updateSymbolDraw: function _updateSymbolDraw(data, seriesModel) {\n    var symbolDraw = this._symbolDraw;\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (!symbolDraw || isLargeDraw !== this._isLargeDraw) {\n      symbolDraw && symbolDraw.remove();\n      symbolDraw = this._symbolDraw = isLargeDraw ? new LargeSymbolDraw() : new SymbolDraw();\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(symbolDraw.group);\n    return symbolDraw;\n  },\n  remove: function remove(ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n    this._symbolDraw = null;\n  },\n  dispose: function dispose() {}\n});","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/chart/scatter/ScatterView.js"],"names":["echarts","require","SymbolDraw","LargeSymbolDraw","pointsLayout","extendChartView","type","render","seriesModel","ecModel","api","data","getData","symbolDraw","_updateSymbolDraw","updateData","_finished","incrementalPrepareRender","incrementalPrepareUpdate","incrementalRender","taskParams","_symbolDraw","incrementalUpdate","end","count","updateTransform","group","dirty","isPersistent","update","res","reset","progress","start","updateLayout","pipelineContext","isLargeDraw","large","_isLargeDraw","remove","removeAll","add","dispose"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\n\nvar SymbolDraw = require(\"../helper/SymbolDraw\");\n\nvar LargeSymbolDraw = require(\"../helper/LargeSymbolDraw\");\n\nvar pointsLayout = require(\"../../layout/points\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\necharts.extendChartView({\n  type: 'scatter',\n  render: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.updateData(data);\n    this._finished = true;\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.incrementalPrepareUpdate(data);\n    this._finished = false;\n  },\n  incrementalRender: function (taskParams, seriesModel, ecModel) {\n    this._symbolDraw.incrementalUpdate(taskParams, seriesModel.getData());\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData(); // Must mark group dirty and make sure the incremental layer will be cleared\n    // PENDING\n\n    this.group.dirty();\n\n    if (!this._finished || data.count() > 1e4 || !this._symbolDraw.isPersistent()) {\n      return {\n        update: true\n      };\n    } else {\n      var res = pointsLayout().reset(seriesModel);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count()\n        }, data);\n      }\n\n      this._symbolDraw.updateLayout(data);\n    }\n  },\n  _updateSymbolDraw: function (data, seriesModel) {\n    var symbolDraw = this._symbolDraw;\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (!symbolDraw || isLargeDraw !== this._isLargeDraw) {\n      symbolDraw && symbolDraw.remove();\n      symbolDraw = this._symbolDraw = isLargeDraw ? new LargeSymbolDraw() : new SymbolDraw();\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(symbolDraw.group);\n    return symbolDraw;\n  },\n  remove: function (ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n    this._symbolDraw = null;\n  },\n  dispose: function () {}\n});"]},"metadata":{},"sourceType":"script"}