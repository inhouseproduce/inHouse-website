{"ast":null,"code":"var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n\nvar TOUCH_CLICK_DELAY = 300;\nvar mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\nvar touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\nvar pointerEventNames = {\n  pointerdown: 1,\n  pointerup: 1,\n  pointermove: 1,\n  pointerout: 1\n};\nvar pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n  var nm = name.replace('mouse', 'pointer');\n  return pointerEventNames[nm] ? nm : name;\n});\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n} // function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n */\n\n\nfunction setTouchTimer(instance) {\n  instance._touching = true;\n  clearTimeout(instance._touchTimer);\n  instance._touchTimer = setTimeout(function () {\n    instance._touching = false;\n  }, 700);\n}\n\nvar domHandlers = {\n  /**\n   * Mouse move handler\n   * @inner\n   * @param {Event} event\n   */\n  mousemove: function mousemove(event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousemove', event);\n  },\n\n  /**\n   * Mouse out handler\n   * @inner\n   * @param {Event} event\n   */\n  mouseout: function mouseout(event) {\n    event = normalizeEvent(this.dom, event);\n    var element = event.toElement || event.relatedTarget;\n\n    if (element !== this.dom) {\n      while (element && element.nodeType !== 9) {\n        // 忽略包含在root中的dom引起的mouseOut\n        if (element === this.dom) {\n          return;\n        }\n\n        element = element.parentNode;\n      }\n    }\n\n    this.trigger('mouseout', event);\n  },\n\n  /**\n   * Touch开始响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchstart: function touchstart(event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(this, event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should\n    // be triggered, and must before `mousedown` triggered.\n\n    domHandlers.mousemove.call(this, event);\n    domHandlers.mousedown.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch移动响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchmove: function touchmove(event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(this, event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    domHandlers.mousemove.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch结束响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchend: function touchend(event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(this, event, 'end');\n    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      domHandlers.click.call(this, event);\n    }\n\n    setTouchTimer(this);\n  },\n  pointerdown: function pointerdown(event) {\n    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function pointermove(event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function pointerup(event) {\n    domHandlers.mouseup.call(this, event);\n  },\n  pointerout: function pointerout(event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check domHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mouseout.call(this, event);\n    }\n  }\n};\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// Common handlers\n\n\nzrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  domHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * 为控制类实例初始化dom 事件处理函数\n *\n * @inner\n * @param {module:zrender/Handler} instance 控制类实例\n */\n\nfunction initDomHandler(instance) {\n  zrUtil.each(touchHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(pointerHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(mouseHandlerNames, function (name) {\n    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n  });\n\n  function makeMouseHandler(fn, instance) {\n    return function () {\n      if (instance._touching) {\n        return;\n      }\n\n      return fn.apply(instance, arguments);\n    };\n  }\n}\n\nfunction HandlerDomProxy(dom) {\n  Eventful.call(this);\n  this.dom = dom;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._touching = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this._touchTimer;\n  this._handlers = {};\n  initDomHandler(this);\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    mountHandlers(pointerHandlerNames, this); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    mountHandlers(mouseHandlerNames, this);\n  }\n\n  function mountHandlers(handlerNames, instance) {\n    zrUtil.each(handlerNames, function (name) {\n      addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n    }, instance);\n  }\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n  for (var i = 0; i < handlerNames.length; i++) {\n    var name = handlerNames[i];\n    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/zrender/lib/dom/HandlerProxy.js"],"names":["_event","require","addEventListener","removeEventListener","normalizeEvent","zrUtil","Eventful","env","TOUCH_CLICK_DELAY","mouseHandlerNames","touchHandlerNames","pointerEventNames","pointerdown","pointerup","pointermove","pointerout","pointerHandlerNames","map","name","nm","replace","eventNameFix","browser","firefox","setTouchTimer","instance","_touching","clearTimeout","_touchTimer","setTimeout","domHandlers","mousemove","event","dom","trigger","mouseout","element","toElement","relatedTarget","nodeType","parentNode","touchstart","zrByTouch","_lastTouchMoment","Date","handler","processGesture","call","mousedown","touchmove","touchend","mouseup","click","isPointerFromTouch","pointerType","each","initDomHandler","_handlers","bind","makeMouseHandler","fn","apply","arguments","HandlerDomProxy","pointerEventsSupported","mountHandlers","touchEventsSupported","handlerNames","handlerDomProxyProto","prototype","dispose","concat","i","length","setCursor","cursorStyle","style","cursor","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n\nvar TOUCH_CLICK_DELAY = 300;\nvar mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\nvar touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\nvar pointerEventNames = {\n  pointerdown: 1,\n  pointerup: 1,\n  pointermove: 1,\n  pointerout: 1\n};\nvar pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n  var nm = name.replace('mouse', 'pointer');\n  return pointerEventNames[nm] ? nm : name;\n});\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n} // function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n */\n\n\nfunction setTouchTimer(instance) {\n  instance._touching = true;\n  clearTimeout(instance._touchTimer);\n  instance._touchTimer = setTimeout(function () {\n    instance._touching = false;\n  }, 700);\n}\n\nvar domHandlers = {\n  /**\n   * Mouse move handler\n   * @inner\n   * @param {Event} event\n   */\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousemove', event);\n  },\n\n  /**\n   * Mouse out handler\n   * @inner\n   * @param {Event} event\n   */\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var element = event.toElement || event.relatedTarget;\n\n    if (element !== this.dom) {\n      while (element && element.nodeType !== 9) {\n        // 忽略包含在root中的dom引起的mouseOut\n        if (element === this.dom) {\n          return;\n        }\n\n        element = element.parentNode;\n      }\n    }\n\n    this.trigger('mouseout', event);\n  },\n\n  /**\n   * Touch开始响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(this, event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should\n    // be triggered, and must before `mousedown` triggered.\n\n    domHandlers.mousemove.call(this, event);\n    domHandlers.mousedown.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch移动响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(this, event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    domHandlers.mousemove.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch结束响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(this, event, 'end');\n    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      domHandlers.click.call(this, event);\n    }\n\n    setTouchTimer(this);\n  },\n  pointerdown: function (event) {\n    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    domHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check domHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mouseout.call(this, event);\n    }\n  }\n};\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// Common handlers\n\n\nzrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  domHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * 为控制类实例初始化dom 事件处理函数\n *\n * @inner\n * @param {module:zrender/Handler} instance 控制类实例\n */\n\nfunction initDomHandler(instance) {\n  zrUtil.each(touchHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(pointerHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(mouseHandlerNames, function (name) {\n    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n  });\n\n  function makeMouseHandler(fn, instance) {\n    return function () {\n      if (instance._touching) {\n        return;\n      }\n\n      return fn.apply(instance, arguments);\n    };\n  }\n}\n\nfunction HandlerDomProxy(dom) {\n  Eventful.call(this);\n  this.dom = dom;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._touching = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this._touchTimer;\n  this._handlers = {};\n  initDomHandler(this);\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    mountHandlers(pointerHandlerNames, this); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    mountHandlers(mouseHandlerNames, this);\n  }\n\n  function mountHandlers(handlerNames, instance) {\n    zrUtil.each(handlerNames, function (name) {\n      addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n    }, instance);\n  }\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n  for (var i = 0; i < handlerNames.length; i++) {\n    var name = handlerNames[i];\n    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}