{"ast":null,"code":"(function () {\n  function getType(x) {\n    // TODO make this faster ?\n    return {}.toString.call(x);\n  }\n\n  function hasOwnKey(obj, key) {\n    return {}.hasOwnProperty.call(obj, key);\n  }\n\n  function copyObject(x) {\n    var output = {}; // TODO use Object.keys ?\n\n    for (var key in x) {\n      if (hasOwnKey(x, key)) {\n        output[key] = copy(x[key]);\n      }\n    }\n\n    return output;\n  }\n\n  function copyArray(x) {\n    var length = x.length;\n    var output = new Array(length);\n\n    for (var i = 0; i < length; ++i) {\n      output[i] = copy(x[i]);\n    }\n\n    return output;\n  } // TODO can this be made faster ?\n  // TODO what about regexps, etc. ?\n\n\n  function copy(x) {\n    switch (getType(x)) {\n      case \"[object Array]\":\n        return copyArray(x);\n\n      case \"[object Object]\":\n        return copyObject(x);\n      // TODO is this necessary ?\n\n      case \"[object Date]\":\n        return new Date(x.getTime());\n\n      default:\n        return x;\n    }\n  }\n\n  function isNaN(x) {\n    return x !== x;\n  }\n\n  function isNumberEqual(x, y) {\n    return x === y || isNaN(x) && isNaN(y);\n  }\n\n  function removeChartListeners(chart, x, y) {\n    if (x !== y) {\n      // TODO is this necessary ?\n      if (x == null) {\n        x = [];\n      } // TODO is this necessary ?\n\n\n      if (y == null) {\n        y = [];\n      }\n\n      var xLength = x.length;\n      var yLength = y.length;\n\n      for (var i = 0; i < xLength; ++i) {\n        var xValue = x[i];\n        var has = false; // TODO make this faster ?\n\n        for (var j = 0; j < yLength; ++j) {\n          var yValue = y[j]; // TODO is this correct ?\n\n          if (xValue.event === yValue.event && xValue.method === yValue.method) {\n            has = true;\n            break;\n          }\n        }\n\n        if (!has) {\n          // TODO is this correct ?\n          chart.removeListener(chart, xValue.event, xValue.method);\n        }\n      }\n    }\n  }\n\n  function updateArray(a, x, y) {\n    var didUpdate = false;\n\n    if (x !== y) {\n      var xLength = x.length;\n      var yLength = y.length;\n\n      if (xLength !== yLength) {\n        a.length = yLength;\n        didUpdate = true;\n      }\n\n      for (var i = 0; i < yLength; ++i) {\n        if (i < xLength) {\n          if (update(a, i, x[i], y[i])) {\n            didUpdate = true;\n          }\n        } else {\n          // TODO make this faster ?\n          a[i] = copy(y[i]); // TODO is this necessary ?\n\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  function update(obj, key, x, y) {\n    var didUpdate = false;\n\n    if (x !== y) {\n      // https://github.com/amcharts/amcharts3-react/issues/40\n      if (hasOwnKey(obj, key)) {\n        var xType = getType(x);\n        var yType = getType(y);\n\n        if (xType === yType) {\n          switch (xType) {\n            case \"[object Array]\":\n              // TODO hacky, remove this after the following bug is fixed:\n              //      Zendesk #28040\n              //      https://codepen.io/team/amcharts/pen/0d61f559cda74682c0ca55d9a24a0f77\n              //      https://www.amcharts.com/kbase/forcing-grouping-stock-chart-data-specific-periods/\n              if (key === \"groupToPeriods\") {\n                // TODO is the copy necessary ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              } else {\n                if (updateArray(obj[key], x, y)) {\n                  didUpdate = true;\n                }\n              }\n\n              break;\n\n            case \"[object Object]\":\n              if (updateObject(obj[key], x, y)) {\n                didUpdate = true;\n              }\n\n              break;\n\n            case \"[object Date]\":\n              if (x.getTime() !== y.getTime()) {\n                // TODO make this faster ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              }\n\n              break;\n\n            case \"[object Number]\":\n              if (!isNumberEqual(x, y)) {\n                // TODO is the copy necessary ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              }\n\n              break;\n\n            default:\n              // TODO is the copy necessary ?\n              obj[key] = copy(y);\n              didUpdate = true;\n              break;\n          } // TODO is this correct ?\n\n        } else {\n          // TODO make this faster ?\n          obj[key] = copy(y);\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  function updateObject(chart, oldObj, newObj) {\n    var didUpdate = false;\n\n    if (oldObj !== newObj) {\n      // TODO use Object.keys ?\n      for (var key in newObj) {\n        if (hasOwnKey(newObj, key)) {\n          // TODO make this faster ?\n          if (hasOwnKey(oldObj, key)) {\n            // TODO should this count as an update ?\n            if (key === \"listeners\") {\n              // TODO make this faster ?\n              removeChartListeners(chart, oldObj[key], newObj[key]);\n            }\n\n            if (update(chart, key, oldObj[key], newObj[key])) {\n              didUpdate = true;\n            }\n          } else {\n            // TODO make this faster ?\n            chart[key] = copy(newObj[key]);\n            didUpdate = true;\n          }\n        }\n      } // TODO use Object.keys ?\n\n\n      for (var key in oldObj) {\n        if (hasOwnKey(oldObj, key) && !hasOwnKey(newObj, key)) {\n          if (key === \"listeners\") {\n            removeChartListeners(chart, oldObj[key], []);\n          }\n\n          delete chart[key];\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  var id = 0;\n  AmCharts.React = createReactClass({\n    getInitialState: function getInitialState() {\n      return {\n        id: \"__AmCharts_React_\" + ++id + \"__\",\n        chart: null\n      };\n    },\n    componentDidMount: function componentDidMount() {\n      // AmCharts mutates the config object, so we have to make a deep copy to prevent that\n      var props = copy(this.props.options);\n      var chart = AmCharts.makeChart(this.state.id, props, this.props.delay);\n      this.setState({\n        chart: chart\n      });\n    },\n    // TODO is this correct ? should this use componentWillUpdate instead ?\n    componentDidUpdate: function componentDidUpdate(oldProps) {\n      if (this.state.chart) {\n        var didUpdate = updateObject(this.state.chart, oldProps.options, this.props.options); // TODO make this faster\n\n        if (didUpdate) {\n          this.state.chart.validateNow(true);\n        }\n      }\n    },\n    componentWillUnmount: function componentWillUnmount() {\n      if (this.state.chart) {\n        this.state.chart.clear();\n      }\n    },\n    render: function render() {\n      return React.createElement(\"div\", {\n        id: this.state.id,\n        className: this.props.className,\n        style: this.props.style\n      });\n    }\n  });\n})();","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/@amcharts/amcharts3-react/amcharts3-react.js"],"names":["getType","x","toString","call","hasOwnKey","obj","key","hasOwnProperty","copyObject","output","copy","copyArray","length","Array","i","Date","getTime","isNaN","isNumberEqual","y","removeChartListeners","chart","xLength","yLength","xValue","has","j","yValue","event","method","removeListener","updateArray","a","didUpdate","update","xType","yType","updateObject","oldObj","newObj","id","AmCharts","React","createReactClass","getInitialState","componentDidMount","props","options","makeChart","state","delay","setState","componentDidUpdate","oldProps","validateNow","componentWillUnmount","clear","render","createElement","className","style"],"mappings":"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","sourcesContent":["(function () {\r\n  function getType(x) {\r\n    // TODO make this faster ?\r\n    return {}.toString.call(x);\r\n  }\r\n\r\n  function hasOwnKey(obj, key) {\r\n    return {}.hasOwnProperty.call(obj, key);\r\n  }\r\n\r\n\r\n  function copyObject(x) {\r\n    var output = {};\r\n\r\n    // TODO use Object.keys ?\r\n    for (var key in x) {\r\n      if (hasOwnKey(x, key)) {\r\n        output[key] = copy(x[key]);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  function copyArray(x) {\r\n    var length = x.length;\r\n\r\n    var output = new Array(length);\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      output[i] = copy(x[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  // TODO can this be made faster ?\r\n  // TODO what about regexps, etc. ?\r\n  function copy(x) {\r\n    switch (getType(x)) {\r\n    case \"[object Array]\":\r\n      return copyArray(x);\r\n\r\n    case \"[object Object]\":\r\n      return copyObject(x);\r\n\r\n    // TODO is this necessary ?\r\n    case \"[object Date]\":\r\n      return new Date(x.getTime());\r\n\r\n    default:\r\n      return x;\r\n    }\r\n  }\r\n\r\n\r\n  function isNaN(x) {\r\n    return x !== x;\r\n  }\r\n\r\n  function isNumberEqual(x, y) {\r\n    return x === y || (isNaN(x) && isNaN(y));\r\n  }\r\n\r\n\r\n  function removeChartListeners(chart, x, y) {\r\n    if (x !== y) {\r\n      // TODO is this necessary ?\r\n      if (x == null) {\r\n        x = [];\r\n      }\r\n\r\n      // TODO is this necessary ?\r\n      if (y == null) {\r\n        y = [];\r\n      }\r\n\r\n      var xLength = x.length;\r\n      var yLength = y.length;\r\n\r\n      for (var i = 0; i < xLength; ++i) {\r\n        var xValue = x[i];\r\n\r\n        var has = false;\r\n\r\n        // TODO make this faster ?\r\n        for (var j = 0; j < yLength; ++j) {\r\n          var yValue = y[j];\r\n\r\n          // TODO is this correct ?\r\n          if (xValue.event  === yValue.event &&\r\n              xValue.method === yValue.method) {\r\n            has = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!has) {\r\n          // TODO is this correct ?\r\n          chart.removeListener(chart, xValue.event, xValue.method);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function updateArray(a, x, y) {\r\n    var didUpdate = false;\r\n\r\n    if (x !== y) {\r\n      var xLength = x.length;\r\n      var yLength = y.length;\r\n\r\n      if (xLength !== yLength) {\r\n        a.length = yLength;\r\n        didUpdate = true;\r\n      }\r\n\r\n      for (var i = 0; i < yLength; ++i) {\r\n        if (i < xLength) {\r\n          if (update(a, i, x[i], y[i])) {\r\n            didUpdate = true;\r\n          }\r\n\r\n        } else {\r\n          // TODO make this faster ?\r\n          a[i] = copy(y[i]);\r\n          // TODO is this necessary ?\r\n          didUpdate = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return didUpdate;\r\n  }\r\n\r\n\r\n  function update(obj, key, x, y) {\r\n    var didUpdate = false;\r\n\r\n    if (x !== y) {\r\n      // https://github.com/amcharts/amcharts3-react/issues/40\r\n      if (hasOwnKey(obj, key)) {\r\n        var xType = getType(x);\r\n        var yType = getType(y);\r\n\r\n        if (xType === yType) {\r\n          switch (xType) {\r\n          case \"[object Array]\":\r\n            // TODO hacky, remove this after the following bug is fixed:\r\n            //      Zendesk #28040\r\n            //      https://codepen.io/team/amcharts/pen/0d61f559cda74682c0ca55d9a24a0f77\r\n            //      https://www.amcharts.com/kbase/forcing-grouping-stock-chart-data-specific-periods/\r\n            if (key === \"groupToPeriods\") {\r\n              // TODO is the copy necessary ?\r\n              obj[key] = copy(y);\r\n              didUpdate = true;\r\n\r\n            } else {\r\n              if (updateArray(obj[key], x, y)) {\r\n                didUpdate = true;\r\n              }\r\n            }\r\n            break;\r\n\r\n          case \"[object Object]\":\r\n            if (updateObject(obj[key], x, y)) {\r\n              didUpdate = true;\r\n            }\r\n            break;\r\n\r\n          case \"[object Date]\":\r\n            if (x.getTime() !== y.getTime()) {\r\n              // TODO make this faster ?\r\n              obj[key] = copy(y);\r\n              didUpdate = true;\r\n            }\r\n            break;\r\n\r\n          case \"[object Number]\":\r\n            if (!isNumberEqual(x, y)) {\r\n              // TODO is the copy necessary ?\r\n              obj[key] = copy(y);\r\n              didUpdate = true;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            // TODO is the copy necessary ?\r\n            obj[key] = copy(y);\r\n            didUpdate = true;\r\n            break;\r\n          }\r\n\r\n        // TODO is this correct ?\r\n        } else {\r\n          // TODO make this faster ?\r\n          obj[key] = copy(y);\r\n          didUpdate = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return didUpdate;\r\n  }\r\n\r\n  function updateObject(chart, oldObj, newObj) {\r\n    var didUpdate = false;\r\n\r\n    if (oldObj !== newObj) {\r\n      // TODO use Object.keys ?\r\n      for (var key in newObj) {\r\n        if (hasOwnKey(newObj, key)) {\r\n          // TODO make this faster ?\r\n          if (hasOwnKey(oldObj, key)) {\r\n            // TODO should this count as an update ?\r\n            if (key === \"listeners\") {\r\n              // TODO make this faster ?\r\n              removeChartListeners(chart, oldObj[key], newObj[key]);\r\n            }\r\n\r\n            if (update(chart, key, oldObj[key], newObj[key])) {\r\n              didUpdate = true;\r\n            }\r\n\r\n          } else {\r\n            // TODO make this faster ?\r\n            chart[key] = copy(newObj[key]);\r\n            didUpdate = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // TODO use Object.keys ?\r\n      for (var key in oldObj) {\r\n        if (hasOwnKey(oldObj, key) && !hasOwnKey(newObj, key)) {\r\n          if (key === \"listeners\") {\r\n            removeChartListeners(chart, oldObj[key], []);\r\n          }\r\n\r\n          delete chart[key];\r\n          didUpdate = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return didUpdate;\r\n  }\r\n\r\n\r\n  var id = 0;\r\n\r\n  AmCharts.React = createReactClass({\r\n    getInitialState: function () {\r\n      return {\r\n        id: \"__AmCharts_React_\" + (++id) + \"__\",\r\n        chart: null\r\n      };\r\n    },\r\n\r\n    componentDidMount: function () {\r\n      // AmCharts mutates the config object, so we have to make a deep copy to prevent that\r\n      var props = copy(this.props.options);\r\n\r\n      var chart = AmCharts.makeChart(this.state.id, props, this.props.delay);\r\n\r\n      this.setState({\r\n        chart: chart\r\n      });\r\n    },\r\n\r\n    // TODO is this correct ? should this use componentWillUpdate instead ?\r\n    componentDidUpdate: function (oldProps) {\r\n      if (this.state.chart) {\r\n        var didUpdate = updateObject(this.state.chart, oldProps.options, this.props.options);\r\n\r\n        // TODO make this faster\r\n        if (didUpdate) {\r\n          this.state.chart.validateNow(true);\r\n        }\r\n      }\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n      if (this.state.chart) {\r\n        this.state.chart.clear();\r\n      }\r\n    },\r\n\r\n    render: function () {\r\n      return React.createElement(\"div\", {\r\n        id: this.state.id,\r\n        className: this.props.className,\r\n        style: this.props.style\r\n      });\r\n    }\r\n  });\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}