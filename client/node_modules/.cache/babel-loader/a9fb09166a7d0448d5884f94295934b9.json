{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nvar geoSourceManager = require(\"../../coord/geo/geoSourceManager\");\n\nvar _component = require(\"../../util/component\");\n\nvar getUID = _component.getUID;\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nfunction getFixedItemStyle(model, scale) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, regionsGroup, api, fromView) {\n  regionsGroup.off('click');\n  regionsGroup.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    regionsGroup.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    regionsGroup.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, regionsGroup);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, regionsGroup) {\n  // FIXME\n  regionsGroup.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {string}\n   * @private\n   */\n\n  this.uid = getUID('ec_map_draw');\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n  /**\n   * @type {string}\n   */\n\n  this._mapName;\n  /**\n   * @type {boolean}\n   */\n\n  this._initialized;\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._regionsGroup = new graphic.Group());\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._backgroundGroup = new graphic.Group());\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function draw(mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n\n    this._updateBackground(geo);\n\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var scale = geo.scale;\n    var transform = {\n      position: geo.position,\n      scale: scale\n    }; // No animation when first draw or in action\n\n    if (!regionsGroup.childAt(0) || payload) {\n      group.attr(transform);\n    } else {\n      graphic.updateProps(group, transform, mapOrGeoModel);\n    }\n\n    regionsGroup.removeAll();\n    var itemStyleAccessPath = ['itemStyle'];\n    var hoverItemStyleAccessPath = ['emphasis', 'itemStyle'];\n    var labelAccessPath = ['label'];\n    var hoverLabelAccessPath = ['emphasis', 'label'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel, scale);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          shape: {\n            points: geometry.exterior\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); i++) {\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            shape: {\n              points: geometry.interiors[i]\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: region.center.slice(),\n          // FIXME\n          // label rotation is not support yet in geo or regions of series-map\n          // that has no data. The rotation will be effected by this `scale`.\n          // So needed to change to RectText?\n          scale: [1 / scale[0], 1 / scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          componentIndex: mapOrGeoModel.componentIndex,\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      graphic.setHoverStyle(regionGroup, hoverItemStyle, {\n        hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')\n      });\n      regionsGroup.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, regionsGroup, api, fromView);\n    updateMapSelected(mapOrGeoModel, regionsGroup);\n  },\n  remove: function remove() {\n    this._regionsGroup.removeAll();\n\n    this._backgroundGroup.removeAll();\n\n    this._controller.dispose();\n\n    this._mapName && geoSourceManager.removeGraphic(this._mapName, this.uid);\n    this._mapName = null;\n    this._controllerHost = {};\n  },\n  _updateBackground: function _updateBackground(geo) {\n    var mapName = geo.map;\n\n    if (this._mapName !== mapName) {\n      zrUtil.each(geoSourceManager.makeGraphic(mapName, this.uid), function (root) {\n        this._backgroundGroup.add(root);\n      }, this);\n    }\n\n    this._mapName = mapName;\n  },\n  _updateController: function _updateController(mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n\n      if (this._updateGroup) {\n        var scale = this.group.scale;\n\n        this._regionsGroup.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/eduardjacobs/Desktop/files/inHouse-website/client/node_modules/echarts/lib/component/helper/MapDraw.js"],"names":["zrUtil","require","RoamController","roamHelper","_cursorHelper","onIrrelevantElement","graphic","geoSourceManager","_component","getUID","getFixedItemStyle","model","scale","itemStyle","getItemStyle","areaColor","get","fill","updateMapSelectHandler","mapDraw","mapOrGeoModel","regionsGroup","api","fromView","off","on","_mouseDownFlag","e","el","target","__regions","parent","action","type","mainType","batch","map","region","name","from","uid","id","dispatchAction","updateMapSelected","eachChild","otherRegionEl","each","trigger","isSelected","MapDraw","updateGroup","group","Group","_controller","getZr","_controllerHost","_updateGroup","_mapName","_initialized","add","_regionsGroup","_backgroundGroup","prototype","constructor","draw","ecModel","payload","isGeo","data","getData","eachComponent","subType","mapSeries","getHostGeoModel","geo","coordinateSystem","_updateBackground","transform","position","childAt","attr","updateProps","removeAll","itemStyleAccessPath","hoverItemStyleAccessPath","labelAccessPath","hoverLabelAccessPath","nameMap","createHashMap","regions","regionGroup","set","compoundPath","CompoundPath","shape","paths","regionModel","getRegionModel","itemStyleModel","getModel","hoverItemStyleModel","hoverItemStyle","labelModel","hoverLabelModel","dataIdx","indexOfName","visualColor","getItemVisual","geometries","geometry","push","Polygon","points","exterior","i","interiors","length","setStyle","style","strokeNoScale","culling","showLabel","hoverShowLabel","isDataNaN","isNaN","mapDimension","itemLayout","getItemLayout","query","labelFetcher","textEl","Text","center","slice","z2","silent","setLabelStyle","hoverStyle","labelDataIndex","defaultText","useInsideStyle","textAlign","textVerticalAlign","setItemGraphicEl","eventData","componentType","componentIndex","geoIndex","option","groupRegions","setHoverStyle","hoverSilentOnTouch","_updateController","remove","dispose","removeGraphic","mapName","makeGraphic","root","controller","controllerHost","zoomLimit","zoom","getZoom","enable","makeActionBase","updateViewOnPan","dx","dy","extend","updateViewOnZoom","originX","originY","traverse","setPointerChecker","x","y","getViewRectAfterRoam","contain","_default","module","exports"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nvar geoSourceManager = require(\"../../coord/geo/geoSourceManager\");\n\nvar _component = require(\"../../util/component\");\n\nvar getUID = _component.getUID;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction getFixedItemStyle(model, scale) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, regionsGroup, api, fromView) {\n  regionsGroup.off('click');\n  regionsGroup.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    regionsGroup.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    regionsGroup.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, regionsGroup);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, regionsGroup) {\n  // FIXME\n  regionsGroup.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {string}\n   * @private\n   */\n\n  this.uid = getUID('ec_map_draw');\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n  /**\n   * @type {string}\n   */\n\n  this._mapName;\n  /**\n   * @type {boolean}\n   */\n\n  this._initialized;\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._regionsGroup = new graphic.Group());\n  /**\n   * @type {module:zrender/container/Group}\n   */\n\n  group.add(this._backgroundGroup = new graphic.Group());\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n\n    this._updateBackground(geo);\n\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var scale = geo.scale;\n    var transform = {\n      position: geo.position,\n      scale: scale\n    }; // No animation when first draw or in action\n\n    if (!regionsGroup.childAt(0) || payload) {\n      group.attr(transform);\n    } else {\n      graphic.updateProps(group, transform, mapOrGeoModel);\n    }\n\n    regionsGroup.removeAll();\n    var itemStyleAccessPath = ['itemStyle'];\n    var hoverItemStyleAccessPath = ['emphasis', 'itemStyle'];\n    var labelAccessPath = ['label'];\n    var hoverLabelAccessPath = ['emphasis', 'label'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel, scale);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          shape: {\n            points: geometry.exterior\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); i++) {\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            shape: {\n              points: geometry.interiors[i]\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: region.center.slice(),\n          // FIXME\n          // label rotation is not support yet in geo or regions of series-map\n          // that has no data. The rotation will be effected by this `scale`.\n          // So needed to change to RectText?\n          scale: [1 / scale[0], 1 / scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          componentIndex: mapOrGeoModel.componentIndex,\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      graphic.setHoverStyle(regionGroup, hoverItemStyle, {\n        hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')\n      });\n      regionsGroup.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, regionsGroup, api, fromView);\n    updateMapSelected(mapOrGeoModel, regionsGroup);\n  },\n  remove: function () {\n    this._regionsGroup.removeAll();\n\n    this._backgroundGroup.removeAll();\n\n    this._controller.dispose();\n\n    this._mapName && geoSourceManager.removeGraphic(this._mapName, this.uid);\n    this._mapName = null;\n    this._controllerHost = {};\n  },\n  _updateBackground: function (geo) {\n    var mapName = geo.map;\n\n    if (this._mapName !== mapName) {\n      zrUtil.each(geoSourceManager.makeGraphic(mapName, this.uid), function (root) {\n        this._backgroundGroup.add(root);\n      }, this);\n    }\n\n    this._mapName = mapName;\n  },\n  _updateController: function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n\n      if (this._updateGroup) {\n        var scale = this.group.scale;\n\n        this._regionsGroup.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}